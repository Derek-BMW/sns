package com.tmwsoft.sns.web.filter;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.image.BufferedImage;import java.io.IOException;import java.io.PrintWriter;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.imageio.ImageIO;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.util.FileHelper;import com.tmwsoft.sns.util.SysConstants;import com.tmwsoft.sns.web.servlet.WapperedResponse;public class ContentFilter implements Filter {	public void init(FilterConfig fc) throws ServletException {	}	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {		HttpServletRequest request = (HttpServletRequest) req;		HttpServletResponse response = (HttpServletResponse) res;		String ac = request.getParameter("ac");		if ("seccode".equals(ac)) {			// 请求安全码			doSeccode(request, response);			return;		}		WapperedResponse wapper = new WapperedResponse(response);		if ("swfupload".equals(ac) || ("stat".equals(ac) && !Common.empty(request.getParameter("xml")))) {			// 请求上传文件或者后台统计			request.setCharacterEncoding("UTF-8");			chain.doFilter(request, wapper);			swf_Out(request, response, wapper);			return;		}		// 执行过滤链		chain.doFilter(request, wapper);		// 执行完过滤链，处理响应内容为八进制应用程序		String contentType = response.getContentType();		if (contentType != null && contentType.startsWith("application/octet-stream")) {			byte[] content = wapper.getByteData();			ServletOutputStream out = response.getOutputStream();			out.write(content);			out.flush();			return;		}		// 		ob_Out(request, response, wapper);	}	private void doSeccode(HttpServletRequest request, HttpServletResponse response) {		String seccode = Common.createSeccode();		request.getSession().setAttribute("seccode", seccode);		int width = 100, height = 40;		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);		Graphics g = image.getGraphics();		g.setColor(getRandColor(200, 235));		g.fillRect(0, 0, width, height);		g.setFont(new Font("Zapfino", Font.BOLD, 20));		for (int i = 0; i < 4; i++) {			g.setColor(new Color(20 + Common.rand(110), 20 + Common.rand(110), 20 + Common.rand(110)));			int x = Common.rand(width);			int y = Common.rand(height);			int xl = Common.rand(width);			int yl = Common.rand(height);			g.drawLine(x, y, x + xl, y + yl);		}		for (int i = 0; i < 4; i++) {			char rand = seccode.charAt(i);			g.setColor(getRandColor(10, 150));			g.drawString(String.valueOf(rand), 24 * i + Common.rand(4), 22 + Common.rand(6));		}		g.dispose();		try {			response.setContentType("image/JPEG");			ImageIO.write(image, "JPEG", response.getOutputStream());		} catch (IOException e) {			e.printStackTrace();		}	}	private Color getRandColor(int fc, int bc) {		if (fc > 255) {			fc = 255;		}		if (bc > 255) {			bc = 255;		}		int r = fc + Common.rand(bc - fc);		int g = fc + Common.rand(bc - fc);		int b = fc + Common.rand(bc - fc);		return new Color(r, g, b);	}	private void swf_Out(HttpServletRequest request, HttpServletResponse response, WapperedResponse wapper) throws IOException {		String content = wapper.getResponseData();		response.reset();		response.resetBuffer();		response.setContentType("application/xml; charset=UTF-8");		response.setHeader("Expires", "-1");		response.addHeader("Cache-Control", "no-store, private, post-check=0, pre-check=0, max-age=0");		response.setHeader("Pragma", "no-cache");		response.setCharacterEncoding("UTF-8");		PrintWriter out = response.getWriter();		out.write(Common.trim(content));		out.flush();	}	private void ob_Out(HttpServletRequest request, HttpServletResponse response, WapperedResponse wapper) throws IOException {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int allowRewrite = 0;		int linkGuide = 0;		int headerCharset = 0;		if (sConfig != null) {			allowRewrite = (Integer) sConfig.get("allowrewrite");			linkGuide = (Integer) sConfig.get("linkguide");			headerCharset = (Integer) sConfig.get("headercharset");		}		// 转码响应内容		String content = wapper.getResponseData().trim();		if (allowRewrite > 0) {			// 只处理社区首页和个人主页，注意要转换的路径必须以<a href=开头			content = rewriteURL(content, "(?is)\\<a href\\=\"zone\\.action\\?(uid|do)+\\=([a-z0-9\\=\\&]+?)\"", "zone-", 2);			content = content.replaceAll("(?i)\\<a href\\=\"zone.action\"", "<a href=\"zone.html\"");			content = rewriteURL(content, "(?is)\\<a href\\=\"portal\\.action\\?ac\\=([a-z0-9\\=\\&]+?)\"", "index-", 1);			content = content.replaceAll("(?i)\\<a href\\=\"portal.action\"", "<a href=\"index.html\"");		}		if (linkGuide > 0) {			content = iframeURL(content, "(?is)\\<a href\\=\"http\\:\\/\\/(.+?)\"");		}		// 处理响应方式		PrintWriter out = response.getWriter();		Integer inajax = null;		if(sGlobal != null) {			inajax = (Integer) sGlobal.get("inajax");		}		// ajax方式		if (inajax != null && inajax > 0) {			content = content.replaceAll("([\\x01-\\x09\\x0b-\\x0c\\x0e-\\x1f])+", " ");			content = content.replace("]]>", "]]&gt;").trim();			response.setContentType("application/xml; charset=" + SysConstants.SNS_CHARSET);			response.setHeader("Cache-Control", "no-store, private, post-check=0, pre-check=0, max-age=0");			response.setHeader("Program", "no-cache");			response.setDateHeader("Expirse", -1);			out.write("<?xml version=\"1.0\" encoding=\"" + SysConstants.SNS_CHARSET + "\"?>\n");			out.write("<root><![CDATA[" + Common.trim(content) + "]]></root>");			out.flush();			return;		}		// 设置http方式的响应字符集		if (headerCharset == 1) {			response.setContentType("text/html; charset=" + SysConstants.SNS_CHARSET);		}		// 请求extend.action?action=js返回响应isWriteJsFile为true时		String uri = request.getRequestURI();		String action = request.getParameter("action");		boolean isWriteJsFile = request.getAttribute("isWriteJsFile") == null ? false : (Boolean) request.getAttribute("isWriteJsFile");		if (uri != null && uri.endsWith("extend.action") && action.equals("js") && isWriteJsFile) {			String s = "(?is)\\<div\\s+class=\"pages\"\\>.+?\\</div\\>";			String obcontent = "";			if (!"".equals(content)) {				content = content.replaceAll(s, "");				content = content.replaceAll("(\r|\n)", "\n");				Matcher m = Pattern.compile("(?i)\\s+(href|src)=\"(.+?)\"").matcher(content);				if (m.find()) {					String tag = m.group(1);					String url = m.group(2);					if (tag != null && url != null) {						if (!Common.matches(url, "(?i)^(http\\:\\/\\/|ftp\\:\\/\\/|https\\:\\/\\/|\\/)")) {							url = Common.getSiteUrl(request) + url;						}						StringBuffer buffer = new StringBuffer();						m.appendReplacement(buffer, " " + tag + "=\"" + url + "\"");						m.appendTail(buffer);						content = buffer.toString();					}				}				String[] lines = content.split("\n");				for (String line : lines) {					line = Common.addCSlashes(line.trim(), new char[] { '\'', '\\' });					obcontent += "document.writeln('" + line + "');\n";				}			} else {				obcontent += "document.writeln('没有数据')";			}			int updatetime = (Integer) request.getAttribute("updatetime");			if (updatetime > 0) {				int id = (Integer) request.getAttribute("id");				String path = SysConstants.snsRoot + "/data/block_cache/block_" + id + ".js";				FileHelper.writeFile(path, obcontent);			}			content = obcontent;		}		// 写入处理了的响应内容		out.write(content);		out.flush();	}	private String rewriteURL(String content, String regex, String pre, int group) {		Pattern pCode = Pattern.compile(regex);		Matcher m = pCode.matcher(content);		StringBuffer b = new StringBuffer();		while (m.find()) {			String para = m.group(group);			para = para.replace("&", "-");			para = para.replace("=", "-");			m.appendReplacement(b, "<a href=\"" + pre + para + ".html\"");		}		m.appendTail(b);		return b.toString();	}	private String iframeURL(String content, String regex) {		Pattern pCode = Pattern.compile(regex);		Matcher m = pCode.matcher(content);		StringBuffer b = new StringBuffer();		while (m.find()) {			String url = Common.urlEncode(m.group(1));			m.appendReplacement(b, "<a href=\"extend.action?action=link&url=http://" + url + "\"");		}		m.appendTail(b);		return b.toString();	}	public void destroy() {	}}