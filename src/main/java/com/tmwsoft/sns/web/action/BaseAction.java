package com.tmwsoft.sns.web.action;import java.io.IOException;import java.io.PrintWriter;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.RequestDispatcher;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import org.apache.struts.actions.DispatchAction;import com.tmwsoft.sns.service.AdminDeleteService;import com.tmwsoft.sns.service.BlogService;import com.tmwsoft.sns.service.CacheService;import com.tmwsoft.sns.service.CronService;import com.tmwsoft.sns.service.DataBaseService;import com.tmwsoft.sns.service.FeedService;import com.tmwsoft.sns.service.MainService;import com.tmwsoft.sns.service.OperateService;import com.tmwsoft.sns.service.PmService;import com.tmwsoft.sns.service.PropsService;import com.tmwsoft.sns.service.ZoneService;import com.tmwsoft.sns.util.BeanFactory;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.vo.MessageVO;public class BaseAction extends DispatchAction {	// spacePage表示是个人空间的页面，用于加载样式。spaceHome表示是个人中心中的功能，用于加载功能菜单。	public static final Set<String> spacePage = new HashSet<String>();// 个人空间的入口，判断方式，在请求中形如 main.action?ac=sendmail ，判断ac	public static final Set<String> spaceHome = new HashSet<String>();// 个人中心 左边菜单中的链接页面，所以需要展示左边的菜单	static {		spacePage.add("credit");// 积分		spacePage.add("task");// 任务		spacePage.add("magic");// 道具		spacePage.add("profile");// 设置		spacePage.add("sendmail");// 发送邮件		spacePage.add("home");// 个人中心		spacePage.add("index");// 我的主页		spacePage.add("pm");// 消息		spacePage.add("notice");// 提醒				spaceHome.add("home");// 个人中心		spaceHome.add("feed");// 动态		spaceHome.add("friend");// 好友		spaceHome.add("top");// 排行榜		spaceHome.add("gift");// 礼物		spaceHome.add("addrbook");// 通讯录		spaceHome.add("friend");// 好友		spaceHome.add("invite");// 邀请	}		protected DataBaseService dataBaseService = (DataBaseService) BeanFactory.getBean("dataBaseService");	protected CacheService cacheService = (CacheService) BeanFactory.getBean("cacheService");	protected AdminDeleteService adminDeleteService = (AdminDeleteService) BeanFactory.getBean("adminDeleteService");	protected OperateService operateService = (OperateService) BeanFactory.getBean("operateService");	protected MainService mainService = (MainService) BeanFactory.getBean("mainService");	protected CronService cronService = (CronService) BeanFactory.getBean("cronService");	protected ZoneService zoneService = (ZoneService) BeanFactory.getBean("zoneService");	protected PropsService propsService = (PropsService) BeanFactory.getBean("propsService");	protected BlogService blogService = (BlogService) BeanFactory.getBean("blogService");	protected FeedService feedService = (FeedService) BeanFactory.getBean("feedService");	protected PmService pmService = (PmService) BeanFactory.getBean("pmService");	protected ActionForward cpMessage(HttpServletRequest request, ActionMapping mapping, MessageVO msgVO) {		return cpMessage(request, mapping, msgVO.getMsgKey(), msgVO.getForwardURL(), msgVO.getSecond(), msgVO.getArgs());	}	protected ActionForward cpMessage(HttpServletRequest request, ActionMapping mapping, String msgKey) {		return cpMessage(request, mapping, msgKey, null);	}	protected ActionForward cpMessage(HttpServletRequest request, ActionMapping mapping, String msgKey, String forwardURL) {		return cpMessage(request, mapping, msgKey, forwardURL, 1);	}	protected ActionForward cpMessage(HttpServletRequest request, ActionMapping mapping, String msgKey, String forwardURL, int second, Object... args) {		request.removeAttribute("globalAd");		request.setAttribute("message", Common.getMessage(request, msgKey, args));		request.setAttribute("url_forward", forwardURL);		request.setAttribute("second", second);		return mapping.findForward("cpmessage");	}	@SuppressWarnings("unchecked")	protected ActionForward showMessage(HttpServletRequest request, HttpServletResponse response, MessageVO msgVO) {		return showMessage(request, response, msgVO.getMsgKey(), msgVO.getForwardURL(), msgVO.getSecond(), msgVO.getArgs());	}	protected ActionForward showMessage(HttpServletRequest request, HttpServletResponse response, String msgkey) {		return showMessage(request, response, msgkey, null);	}	protected ActionForward showMessage(HttpServletRequest request, HttpServletResponse response, String msgkey, String url_forward) {		return showMessage(request, response, msgkey, url_forward, 1);	}	protected ActionForward showMessage(HttpServletRequest request, HttpServletResponse response, String msgKey, String forwardURL, int second, Object... args) {		if ("".equals(forwardURL)) {			forwardURL = null;		}		request.removeAttribute("globalAd");		request.removeAttribute("sCookie");		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String mobile = (String) sGlobal.get("mobile");		String message = Common.getMessage(request, msgKey, args);		if (Common.empty(mobile)) {			int inajax = (Integer) sGlobal.get("inajax");			if (inajax == 0 && forwardURL != null && second == 0) {				response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);				response.setHeader("Location", forwardURL);			} else {				if (inajax > 0) {					if (forwardURL != null) {						message = "<a href=\"" + forwardURL + "\">" + message + "</a><ajaxok>";					}					try {						PrintWriter out = response.getWriter();						out.write(message);						out.flush();					} catch (IOException e) {						e.printStackTrace();					}				} else {					if (forwardURL != null) {						message = "<a href=\"" + forwardURL + "\">" + message + "</a><script>setTimeout(\"window.location.href ='" + forwardURL + "';\", "								+ (second * 1000) + ");</script>";					}					request.setAttribute("url_forward", forwardURL);					request.setAttribute("message", message);					include(request, response, sConfig, sGlobal, "showmessage.jsp");				}			}		} else {			request.setAttribute("url_forward", forwardURL);			request.setAttribute("message", message);			include(request, response, sConfig, sGlobal, "showmessage.jsp");		}		return null;	}	protected Map<String, String> getWheres(String[] intKeys, String[] strKeys, List<String[]> randKeys, String[] likeKeys, String pre,			Map<String, String[]> paramMap, String timeoffset) {		String prefix = " AND ";		if (pre != null) {			prefix += pre;		}		StringBuffer sql = new StringBuffer();		StringBuffer url = new StringBuffer();		if (intKeys != null) {			for (String var : intKeys) {				String[] values = paramMap.get(var);				String value = values != null ? values[0] : null;				if (Common.strlen(value) > 0) {					sql.append(prefix + var + "='" + Common.intval(value) + "'");					url.append("&" + var + "=" + value);				}			}		}		if (strKeys != null) {			for (String var : strKeys) {				String[] values = paramMap.get(var);				String value = values != null ? values[0].trim() : null;				if (Common.strlen(value) > 0) {					sql.append(prefix + var + "='" + value + "'");					url.append("&" + var + "=" + Common.urlEncode(value));				}			}		}		if (randKeys != null) {			String method = null;			String var = null;			for (String[] vars : randKeys) {				method = vars[0];				var = vars[1];				String[] values1 = paramMap.get(var + 1);				String[] values2 = paramMap.get(var + 2);				String temp1 = values1 != null ? values1[0].trim() : null;				String temp2 = values2 != null ? values2[0].trim() : null;				int value1 = 0;				int value2 = 0;				if ("sstrtotime".equals(method)) {					value1 = Common.strToTime(temp1, timeoffset);					value2 = Common.strToTime(temp2, timeoffset);				} else if ("intval".equals(method)) {					value1 = Common.intval(temp1);					value2 = Common.intval(temp2);				}				if (value1 > 0) {					sql.append(prefix + var + ">='" + value1 + "'");					url.append("&" + var + "1=" + Common.urlEncode(temp1));				}				if (value2 > 0) {					sql.append(prefix + var + "<='" + value2 + "'");					url.append("&" + var + "2=" + Common.urlEncode(temp2));				}			}		}		if (likeKeys != null) {			for (String var : likeKeys) {				String[] values = paramMap.get(var);				String value = values != null ? values[0].trim() : null;				if (Common.strlen(value) > 0) {					sql.append(prefix + var + " LIKE BINARY '%" + value + "%'");					url.append("&" + var + "=" + Common.urlEncode(value));				}			}		}		Map<String, String> map = new HashMap<String, String>();		map.put("sql", sql.length() > 0 ? sql.substring(5) : null);		map.put("url", url.toString());		return map;	}	protected Map<String, String> getOrders(String[] allowOrders, String defaultStr, String pre, Map<String, String[]> paramMap) {		String[] orderbys = paramMap.get("orderby");		String[] orderscs = paramMap.get("ordersc");		if (Common.empty(orderbys) || !Common.in_array(allowOrders, orderbys[0])) {			orderbys = new String[] { defaultStr };			paramMap.put("orderby", orderbys);			if (Common.empty(orderscs)) {				orderscs = new String[] { "desc" };				paramMap.put("ordersc", orderscs);			}		}		StringBuffer sql = new StringBuffer();		StringBuffer url = new StringBuffer();		if (pre == null) {			sql.append(" ORDER BY " + orderbys[0] + " ");		} else {			sql.append(" ORDER BY " + pre + orderbys[0] + " ");		}		url.append("&orderby=" + orderbys[0]);		if (!Common.empty(orderscs) && "desc".equals(orderscs[0])) {			url.append("&ordersc=desc");			sql.append(" DESC ");		} else {			url.append("&ordersc=asc");		}		Map<String, String> orders = new HashMap<String, String>();		orders.put("sql", sql.toString());		orders.put("url", url.toString());		return orders;	}	protected boolean submitCheck(HttpServletRequest request, String var) throws Exception {		boolean tag = true;		if ("true".equals(request.getParameter("thirdLogin"))) {// 邵林			return tag;		}		String method = request.getMethod();		String submit = request.getParameter(var);		tag = "POST".equals(method);		tag &= !Common.empty(submit);		if (tag) {			String referer = request.getHeader("Referer");			referer = referer.replaceAll("https?://([^:/]+).*", "$1");			String host = request.getHeader("Host").replaceAll("([^:]+).*", "$1");			String formhash1 = formHash(request);			String formhash2 = request.getParameter("formhash");			tag = Common.empty(referer);			tag |= referer.equals(host);			tag &= formhash1.equals(formhash2);			if (tag) {				return true;			} else {				throw new Exception("submit_invalid");			}		}		return false;	}	protected boolean submitCheck(HttpServletRequest request, String submitModule, String formhash) throws Exception {		if ("POST".equals(request.getMethod()) && !Common.empty(submitModule)) {			String referer = request.getHeader("Referer");			if (Common.empty(referer) || referer.replaceAll("https?://([^:/]+).*", "$1").equals(request.getHeader("Host").replaceAll("([^:]+).*", "$1"))					&& formHash(request).equals(formhash)) {				return true;			} else {				throw new Exception("submit_invalid");			}		}		return false;	}	@SuppressWarnings("unchecked")	protected String formHash(HttpServletRequest request) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String formhash = (String) sGlobal.get("formhash");		if (Common.empty(formhash)) {			String timestamp = sGlobal.get("timestamp").toString();			char split = '|';			StringBuffer temp = new StringBuffer();			temp.append(timestamp.substring(0, timestamp.length() - 7));			temp.append(split);			temp.append(sGlobal.get("supe_uid"));			temp.append(split);			temp.append(Common.md5((String) sConfig.get("sitekey")));			temp.append(split);			if (request.getAttribute("in_admincp") != null) {				temp.append("This is salt of sns!");			}			formhash = Common.md5(temp.toString()).substring(8, 16);			sGlobal.put("formhash", formhash);		}		return formhash;	}	@SuppressWarnings("unchecked")	protected ActionForward include(HttpServletRequest request, HttpServletResponse response, Map<String, Object> sConfig, Map<String, Object> sGlobal, String pageName) {		String tpl = null;		try {			tpl = Common.template(sConfig, sGlobal, pageName);			RequestDispatcher rd = request.getRequestDispatcher(tpl);			rd.include(request, response);		} catch (Exception e) {			try {				response.getWriter().write("模板文件 : " + tpl + " 没有找到或者不能使用！<br>");				response.getWriter().write("Message : " + e.getMessage());			} catch (IOException e1) {				e1.printStackTrace();			}		}		return null;	}	protected ActionForward invokeMethod(Object obj, String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception {		return (ActionForward) obj.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class).invoke(obj, request, response);	}}