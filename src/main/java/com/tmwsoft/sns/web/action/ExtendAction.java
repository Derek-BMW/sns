package com.tmwsoft.sns.web.action;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintWriter;import java.math.BigInteger;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.RequestDispatcher;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.fileupload.FileItem;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.util.CookieHelper;import com.tmwsoft.sns.util.FileHelper;import com.tmwsoft.sns.util.FileUploadUtil;import com.tmwsoft.sns.util.Serializer;import com.tmwsoft.sns.util.SysConstants;import com.tmwsoft.sns.vo.MessageVO;public class ExtendAction extends BaseAction {	private static final String TIME_FORMAT = "HH:mm";	private static final String DATE_FORMAT = "MM月dd日 HH:mm";	@SuppressWarnings("unchecked")	public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");				if(zoneDomain(request, response, sConfig)) {			return null;		}		// supe_uid大于零，说明是用户登录		int supe_uid = (Integer) sGlobal.get("supe_uid");		if (supe_uid > 0) {			return showMessage(request, response, "enter_the_space", "zone.action?do=home", 0);		}				Map<String, Object> space = (Map<String, Object>) request.getAttribute("space");		if (Common.empty(sConfig.get("homepublic"))) {			File cacheFile = new File(SysConstants.snsRoot + "/data/cache/cache_index.txt");			long cacheTime = (int) (cacheFile.lastModified() / 1000);			List<Map<String, Object>> spaces = null;			if ((Integer) sGlobal.get("timestamp") - cacheTime > 900) {				spaces = dataBaseService						.executeQuery("SELECT s.uid, s.username, s.name, s.namestatus, s.friendnum, sf.resideprovince, sf.residecity FROM sns_space s LEFT JOIN sns_spacefield sf ON sf.uid=s.uid ORDER BY s.friendnum DESC LIMIT 0,20");				FileHelper.writeFile(cacheFile, Serializer.serialize(spaces));			} else {				spaces = Serializer.unserialize(FileHelper.readFile(cacheFile));			}			request.setAttribute("spaces", spaces);			int myAppCount = 0;			if ((Integer) sConfig.get("my_status") == 1) {				myAppCount = dataBaseService.findRows("SELECT COUNT(*) FROM sns_myapp WHERE flag>='0'");				if (myAppCount > 0) {					List<Map<String, Object>> myApps = dataBaseService							.executeQuery("SELECT appid,appname FROM sns_myapp WHERE flag>=0 ORDER BY flag DESC, displayorder LIMIT 0,7");					request.setAttribute("myApps", myApps);				}			}			request.setAttribute("myAppCount", myAppCount);			request.setAttribute("tpl_css", "home");			return include(request, response, sConfig, sGlobal, "do_login.jsp");		} else {			return home(request, response, sGlobal, sConfig, space);		}	}	public ActionForward app(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		return include(request, response, sConfig, sGlobal, "iframe.jsp");	}	public ActionForward invite(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String message = Common.checkClose(request, response, (Integer) sGlobal.get("supe_uid"));		if (message != null) {			return showMessage(request, response, message);		}		Map<String, Integer> reward = Common.getReward("invitecode", false, 0, "", true, request, response);		int uid = Common.intval(request.getParameter("u"));		String code = Common.trim(request.getParameter("c"));		int app = Common.intval(request.getParameter("app"));		String requestURI = (String) request.getAttribute("requestURI");		String queryString = "";		if (requestURI != null) {			if (requestURI.indexOf("?") >= 0) {				queryString = requestURI.substring(requestURI.indexOf("?") + 1);			}		}		if (app != 0) {			reward.put("credit", 0);		}		Map<String, Object> invite = new HashMap<String, Object>();		String theURL = null;		String urlPlus = null;		if (uid != 0 && reward.get("credit") == 0) {			invite.put("uid", uid);			invite.put("id", 0);			theURL = "extend.action?action=invite&u=" + uid + "&app=" + app + "&c=" + code;			urlPlus = "uid=" + uid + "&app=" + app + "&code=" + code;		} else {			int id = 0;			String c = "";			int inviteLength = Common.strlen(queryString);			if (inviteLength > 6) {				c = Common.addSlashes(queryString.substring(queryString.length() - 6, queryString.length()));				id = Common.intval(queryString.replace(c, ""));			}			if (id == 0) {				return showMessage(request, response, "invite_code_error");			}			List<Map<String, Object>> inviteList = dataBaseService.executeQuery("SELECT * FROM sns_invite WHERE id='" + id + "' AND code='" + c + "'");			if (inviteList.isEmpty()) {				return showMessage(request, response, "invite_code_error");			}			invite = inviteList.get(0);			if (!Common.empty(invite.get("fuid"))) {				return showMessage(request, response, "invite_code_fuid");			}			if (sGlobal.get("supe_uid").equals(invite.get("uid"))) {				return showMessage(request, response, "should_not_invite_your_own");			}			theURL = "extend.action?action=invite&" + queryString;			urlPlus = "uid=" + invite.get("uid") + "&invite=" + invite.get("code");		}		Map<String, Object> space = Common.getSpace(request, sGlobal, sConfig, invite.get("uid"));		if (Common.empty(space)) {			return showMessage(request, response, "space_does_not_exist");		}		if (uid != 0 && reward.get("credit") == 0) {			if (!code.equals(Common.spaceKey(space, sConfig, app))) {				return showMessage(request, response, "invite_code_error");			}		}		if ((Boolean) space.get("self")) {			return showMessage(request, response, "should_not_invite_your_own");		}		if ((Integer) sGlobal.get("supe_uid") != 0 && Common.in_array(space.get("friends"), sGlobal.get("supe_uid"))) {			space.put("isfriend", true);		} else {			space.put("isfriend", false);		}		String jumpURL = app != 0 ? "userapp.action?id=" + app + "&my_extra=invitedby_bi_" + uid + "_" + code + "&my_suffix=Lw%3D%3D" : "zone.action?uid="				+ space.get("uid");		if ((Boolean) space.get("isfriend")) {			return showMessage(request, response, "you_have_friends", jumpURL, 1);		}		Map<Integer, String> sNames = (Map<Integer, String>) request.getAttribute("sNames");		try {			if (submitCheck(request, "invitesubmit")) {				if ((Integer) sGlobal.get("supe_uid") == 0) {					return showMessage(request, response, "invite_code_error");				}				mainService.updateInvite(request, response, sGlobal, sConfig, sNames, (Integer) invite.get("id"), (Integer) sGlobal.get("supe_uid"),						(String) sGlobal.get("supe_username"), (Integer) space.get("uid"), (String) space.get("username"), app);				return showMessage(request, response, "friends_add", jumpURL, 1, sNames.get(space.get("uid")));			}		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		List<Map<String, Object>> fList = dataBaseService.executeQuery("SELECT fuid AS uid, fusername AS username FROM sns_friend WHERE uid='"				+ invite.get("uid") + "' AND status='1' ORDER BY num DESC, dateline DESC LIMIT 0,12");		request.setAttribute("flist", fList);		Map<String, Integer> numMap = new HashMap<String, Integer>();		for (String var : new String[] { "sns_album", "sns_doing", "sns_blog", "sns_thread", "sns_tagspace" }) {			numMap.put(var, dataBaseService.findRows("SELECT COUNT(*) FROM " + var + " WHERE uid='" + invite.get("uid") + "'"));		}		request.setAttribute("numMap", numMap);		if (app != 0) {			List<Map<String, Object>> appList = dataBaseService.executeQuery("SELECT * FROM sns_myapp WHERE appid='" + app + "'");			if (!appList.isEmpty()) {				request.setAttribute("userapp", appList.get(0));			}		}		request.setAttribute("theURL", theURL);		request.setAttribute("urlPlus", urlPlus);		request.setAttribute("space", space);		return include(request, response, sConfig, sGlobal, "invite.jsp");	}	public ActionForward js(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int id = Common.intval(request.getParameter("id"));		int adId = Common.intval(request.getParameter("adid"));		if (id > 0) {			Map<Integer, Integer> globalBlock = Common.getCacheDate(request, response, "cache/cache_block.jsp", "globalBlock");			if (globalBlock.get(id) == null) {				PrintWriter out = response.getWriter();				out.write("document.write(\'未获取到数据\')");				out.flush();				out.close();				return null;			}			int updatetime = globalBlock.get(id);			String cachefilepath = SysConstants.snsRoot + "/data/block_cache/block_" + id + ".js";			File cachefile = new File(cachefilepath);			if (updatetime > 0 && cachefile.exists() && (Integer) sGlobal.get("timestamp") - cachefile.lastModified() / 1000 < updatetime) {				String content = "document.writeln(\'未获取到数据\')";				if (cachefile.exists()) {					content = FileHelper.readFile(cachefile);				}				PrintWriter out = response.getWriter();				out.write(content);				out.flush();				out.close();				return null;			}			sConfig.put("linkguide", 0);			sConfig.put("allowcache", 0);			include(request, response, sConfig, sGlobal, "/data/blocktpl/" + id + ".jsp");			request.setAttribute("updatetime", updatetime);			request.setAttribute("isWriteJsFile", true);			request.setAttribute("id", id);		} else if (adId > 0) {			String filePath = SysConstants.snsRoot + "/data/adtpl/" + adId + ".htm";			List<String> lines = FileHelper.readFileToList(new File(filePath));			PrintWriter out = response.getWriter();			if (lines.size() > 0) {				for (String line : lines) {					out.write("document.writeln('" + Common.addCSlashes(line.trim(), new char[] { '\'', '\\' }) + "');\n");				}			} else {				out.write("document.writeln('NO AD.')");			}			out.flush();			out.close();		}		return null;	}	public ActionForward link(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String url = request.getParameter("url");		if (Common.empty(url)) {			return showMessage(request, response, "do_success", (String) request.getAttribute("refer"), 0);		} else {			if ((Integer) sConfig.get("linkguide") == 0) {				return showMessage(request, response, "do_success", url, 0);			}		}		Map<String, Object> space = null;		int supe_uid = (Integer) sGlobal.get("supe_uid");		if (supe_uid > 0) {			space = Common.getSpace(request, sGlobal, sConfig, supe_uid);		}		if (Common.empty(space)) {			return showMessage(request, response, "do_success", url, 0);		}		request.setAttribute("space", space);		url = (String) Common.sHtmlSpecialChars(url);		if (!Common.matches(url, "(?i)^http\\:\\/\\/")) {			url = "http://" + url;		}		request.setAttribute("url", url);		request.setAttribute("timestamp", Common.sgmdate(request, "yyyy-MM-dd HH:mm", (Integer) sGlobal.get("timestamp"), true));		return include(request, response, sConfig, sGlobal, "iframe.jsp");	}	public ActionForward home(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		Map<String, Object> sCookie = (Map<String, Object>) request.getAttribute("sCookie");				if(zoneDomain(request, response, sConfig)) {			return null;		}				int supe_uid = (Integer) sGlobal.get("supe_uid");		String message = Common.checkClose(request, response, supe_uid);		if (message != null) {			return showMessage(request, response, message);		}		Map<String, Object> space = (Map<String, Object>) request.getAttribute("space");		if (supe_uid > 0) {			space = Common.getSpace(request, sGlobal, sConfig, supe_uid);			if ((Integer) space.get("flag") == -1) {				return showMessage(request, response, "space_has_been_locked");			}			if (Common.checkPerm(request, response, "banvisit")) {				MessageVO msgVO = Common.ckSpaceLog(request);				if (msgVO != null) {					return showMessage(request, response, msgVO);				} else {					return showMessage(request, response, "you_do_not_have_permission_to_visit");				}			}		}		if(!"sns".equals(sCookie.get("currentsite"))) {			CookieHelper.setCookie(request, response, "currentsite", "sns");			sCookie.put("currentsite", "sns");// 用户进入社区首页，设置当前站点为社区		}		return home(request, response, sGlobal, sConfig, space);	}	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, String> snsConfig = SysConstants.snsConfig;		if ("true".equals(snsConfig.get("updatetime"))) {			int timestamp = (int) (System.currentTimeMillis() / 1000);			dataBaseService.executeUpdate("REPLACE INTO sns_config VALUES ('snsid','" + snsConfig.get("snsid") + "'),('lastupdate','" + timestamp					+ "'),('status','" + snsConfig.get("status") + "')");			snsConfig.remove("updatetime");		}		return null;	}	public ActionForward rss(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		response.setContentType("application/xml");		int uid = Common.intval(request.getParameter("uid"));		String rssDateFormat = "E, d MMM  yyyy HH:mm:ss Z";		Map<String, Object> space = null;		if (uid > 0) {			space = Common.getSpace(request, sGlobal, sConfig, uid);		}		String siteURL = Common.getSiteUrl(request);		if (Common.empty(space)) {			space = new HashMap<String, Object>();			space.put("username", sConfig.get("sitename"));			space.put("name", sConfig.get("sitename"));			space.put("email", sConfig.get("adminemail"));			space.put("space_url", siteURL);			space.put("lastupdate", Common.sgmdate(request, rssDateFormat, 0));			Map privacy = new HashMap();			privacy.put("blog", 1);			space.put("privacy", privacy);		} else {			space.put("username", space.get("username") + "@" + sConfig.get("sitename"));			space.put("space_url", siteURL + "zone.action?uid=" + space.get("uid"));			space.put("lastupdate", Common.sgmdate(request, rssDateFormat, (space.get("lastupdate") != null ? (Integer) space.get("lastupdate") : 0)));		}		String uidSQL = Common.empty(space.get("uid")) ? "" : " AND b.uid='" + space.get("uid") + "'";		List<Map<String, Object>> list = dataBaseService				.executeQuery("SELECT bf.message, b.* FROM sns_blog b LEFT JOIN sns_blogfield bf ON bf.blogid=b.blogid WHERE b.friend='0' " + uidSQL						+ " ORDER BY dateline DESC LIMIT 0, 10");		for (Map<String, Object> value : list) {			if (space.get("privacy") != null && !Common.empty(((Map) space.get("privacy")).get("blog"))) {				value.remove("message");			} else {				value.put("message", Common.getStr((String) value.get("message"), 300, false, false, false, 0, -1, request, response));				if (!Common.empty(value.get("pic"))) {					value.put("pic", Common.pic_cover_get(sConfig, (String) value.get("pic"), (Integer) value.get("picflag")));					value.put("message", value.get("message") + "<br /><img src=\"" + value.get("pic") + "\">");				}			}			value.put("dateline", Common.sgmdate(request, rssDateFormat, (Integer) value.get("dateline")));		}		request.setAttribute("space", space);		request.setAttribute("siteurl", siteURL);		request.setAttribute("list", list);		return include(request, response, sConfig, sGlobal, "space_rss.jsp");	}	public ActionForward userapp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		return include(request, response, sConfig, sGlobal, "userapp.action");	}	public ActionForward avatar(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		response.setHeader("Expires", "0");		response.setHeader("Cache-Control", "no-store, private, post-check=0, pre-check=0, max-age=0");		response.setHeader("Pragma", "no-cache");		String a = request.getParameter("a");		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		sGlobal.put("inajax", 0);		if ("uploadavatar".equals(a)) {			uploadAvatar(sGlobal, sConfig, request, response);		} else if ("rectavatar".equals(a)) {			response.setContentType("application/xml; charset=utf-8");			rectAvatar(sGlobal, sConfig, request, response);		}		return null;	}	/**	 * 解析空间的二级域名	 * http://sns.com/?123	 * http://xxx.sns.com	 * @param request	 * @param response	 * @return	 */	private boolean zoneDomain(HttpServletRequest request, HttpServletResponse response, Map<String, Object> sConfig) {// 处理extend.action/123类似的请求，用于个人主页路径		String requestURI = (String) request.getAttribute("requestURI");		String queryString = null;		if (requestURI != null) {			queryString = requestURI.substring(requestURI.indexOf("?") + 1);		}		if (Common.isNumeric(queryString)) {			try {				RequestDispatcher rd = request.getRequestDispatcher("zone.action?uid=" + queryString);				rd.forward(request, response);			} catch (Exception e) {			}			return true;		}		String paramDo = request.getParameter("do");		// 处理xxx.sns.com类似的请求		if (paramDo == null && !Common.empty(sConfig.get("allowdomain"))) {			String host = request.getServerName();			String domainRoot = (String) sConfig.get("domainroot");			String[] hostArr = host.split("\\.");			String[] domainRootArr = domainRoot.split("\\.");			int hostArrLen = hostArr.length;			int domainRootArrLen = domainRootArr.length;			if (hostArrLen > 2 && hostArrLen > domainRootArrLen && !hostArr[0].equals("www") && !Common.isHoldDomain(sConfig, hostArr[0])) {				try {					RequestDispatcher rd = request.getRequestDispatcher("zone.action?domain=" + hostArr[0]);					rd.forward(request, response);				} catch (Exception e) {				}				return true;			}		}		return false;	}		private void uploadAvatar(Map<String, Object> sGlobal, Map<String, Object> sConfig, HttpServletRequest request, HttpServletResponse response) {		PrintWriter out = null;		FileItem item = null;		try {			out = response.getWriter();			int uid = Common.intval(request.getParameter("uid"));			if (uid > 0) {				sGlobal.put("supe_uid", uid);				String hash = request.getParameter("hash");				String SNS_KEY = SysConstants.snsConfig.get("SNS_KEY");				if (!Common.md5(sGlobal.get("supe_uid") + SNS_KEY).equals(hash)) {					out.write("-1");					return;				}			} else if (Common.empty(uid = (Integer) sGlobal.get("supe_uid"))) {				showMessage(request, response, "to_login", "operate.action?ac=" + sConfig.get("login_action"));				return;			}			String snsDataTemp = SysConstants.snsRoot + "/temp/avatar/";			File tempAvatarDir = new File(snsDataTemp + uid);			if (tempAvatarDir.exists()) {				if (deleteUploadFile(tempAvatarDir, false) == false) {					out.write("-4");					return;				}			} else {				tempAvatarDir.mkdir();			}			String fileType = ".jpg";			File tempAvatar = new File(snsDataTemp + uid + "/" + sGlobal.get("timestamp") + fileType);			FileUploadUtil upload = new FileUploadUtil(new File(snsDataTemp + uid), 4096);			upload.parse(request, SysConstants.SNS_CHARSET);			item = upload.getFileItem("Filedata");			if (!item.isFormField()) {				item.write(tempAvatar);			}			String imgType = Common.getImageType(tempAvatar);			if (Common.empty(imgType)) {				tempAvatar.delete();				out.write("-2");				return;			}			out.write(Common.getSiteUrl(request) + "/temp/avatar/" + uid + "/" + tempAvatar.getName());		} catch (IOException ioe) {			out.write("-5");		} catch (NullPointerException ne) {			out.write("-3");		} catch (Exception e) {			if (item != null) {				item.delete();			}			out.write("-4");		} finally {			out.flush();			out.close();			out = null;			item = null;		}	}	private void rectAvatar(Map<String, Object> sGlobal, Map<String, Object> sConfig, HttpServletRequest request, HttpServletResponse response) {		PrintWriter out = null;		try {			out = response.getWriter();			int uid = Common.intval(request.getParameter("uid"));			if (uid > 0) {				sGlobal.put("supe_uid", uid);				String hash = request.getParameter("hash");				String SNS_KEY = SysConstants.snsConfig.get("SNS_KEY");				if (!Common.md5(sGlobal.get("supe_uid") + SNS_KEY).equals(hash)) {					out.write("<root><message type=\"error\" value=\"-1\" /></root>");					return;				}			} else if (Common.empty(uid = (Integer) sGlobal.get("supe_uid"))) {				showMessage(request, response, "to_login", "operate.action?ac=" + sConfig.get("login_action"));				return;			}			String home = Common.get_home(uid);			String attachDir = SysConstants.snsConfig.get("attachDir");			attachDir = SysConstants.snsRoot + attachDir;			String avatarRoot = attachDir + "/avatar/";			File avatarHomeFile = new File(avatarRoot + home);			if (!avatarHomeFile.isDirectory()) {				Common.set_home(uid, avatarRoot);			}			String avatarType = "real".equals(request.getParameter("avatartype")) ? "real" : "virtual";			File bigAvatarFile = new File(avatarRoot + Common.avatar_file(sGlobal, uid, "big", avatarType));			File middleAvatarfile = new File(avatarRoot + Common.avatar_file(sGlobal, uid, "middle", avatarType));			File smallAvatarfile = new File(avatarRoot + Common.avatar_file(sGlobal, uid, "small", avatarType));			boolean bigOK = writeAvatar(bigAvatarFile, request.getParameter("avatar1"));			boolean middleOK = writeAvatar(middleAvatarfile, request.getParameter("avatar2"));			boolean smallOK = writeAvatar(smallAvatarfile, request.getParameter("avatar3"));			if (!bigOK || !middleOK || !smallOK) {				out.write("<root><message type=\"error\" value=\"-2\" /></root>");				return;			}			boolean success = true;			String bigAvatarType = Common.getImageType(bigAvatarFile);			String middleAvatarType = Common.getImageType(middleAvatarfile);			String smallAvatarType = Common.getImageType(smallAvatarfile);			if (Common.empty(bigAvatarType) || Common.empty(middleAvatarType) || Common.empty(smallAvatarType)) {				if (bigAvatarFile.exists())					bigAvatarFile.delete();				if (middleAvatarfile.exists())					middleAvatarfile.delete();				if (smallAvatarfile.exists())					smallAvatarfile.delete();				success = false;			}			File tempAvatarFile = new File(SysConstants.snsRoot + "/temp/avatar/" + uid);			if (tempAvatarFile.exists()) {				deleteUploadFile(tempAvatarFile, true);			}			if (success) {				out.write("<?xml version=\"1.0\" ?><root><face success=\"1\"/></root>");			} else {				out.write("<?xml version=\"1.0\" ?><root><face success=\"0\"/></root>");			}		} catch (Exception e) {			e.printStackTrace();			out.write("<?xml version=\"1.0\" ?><root><face success=\"0\"/></root>");		} finally {			out.flush();			out.close();			out = null;		}	}	private boolean deleteUploadFile(File file, boolean deleteDir) {		if (file.isDirectory()) {			File[] files = file.listFiles();			for (File tempFile : files) {				if (tempFile.isFile()) {					if (!tempFile.delete()) {						return false;					}				}			}			if (deleteDir) {				file.delete();			}		}		return true;	}	private byte[] flashDataDecode(String dataStr) {		if ((dataStr.length() & 0x01) == 0x01) {			dataStr = new String(dataStr + "0");		}		BigInteger cI = new BigInteger(dataStr, 16);		byte[] data = cI.toByteArray();		return data;	}	private boolean writeAvatar(File avatarFile, String avatar) {		if (Common.empty(avatar)) {			return false;		}		FileOutputStream fos = null;		try {			fos = new FileOutputStream(avatarFile);			byte[] bs = flashDataDecode(avatar);			fos.write(bs, 1, bs.length - 1);		} catch (Exception e) {			return false;		} finally {			try {				if (fos != null) {					fos.flush();					fos.close();					fos = null;				}			} catch (Exception e) {			}		}		return true;	}	@SuppressWarnings("unchecked")	private ActionForward home(HttpServletRequest request, HttpServletResponse response, Map<String, Object> sGlobal, Map<String, Object> sConfig,			Map<String, Object> space) throws Exception {		if (Common.empty(sConfig.get("homepublic"))) {			if (Common.empty(sGlobal.get("supe_uid"))) {				CookieHelper.setCookie(request, response, "_refer", Common.urlEncode((String) request.getAttribute("requestURI")));				return showMessage(request, response, "to_login", "operate.action?ac=" + sConfig.get("login_action"));			}		}		int timestamp = (Integer) sGlobal.get("timestamp");		Map<String, Map<String, Object>> globalHome = Common.getCacheDate(request, response, "cache/cache_home.jsp", "globalHome");		String snsRoot = SysConstants.snsRoot;		Map<String, Object> home = null;		// 日志		List<Map<String, Object>> blogs = null;		String cachePath = snsRoot + "/data/cache/cache_home_blog.txt";		home = getHome(globalHome, "blog");// 后台社区首页聚合设置		if (check_home_cache(home, cachePath, timestamp)) {			blogs = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "blogid", "uid" }, new String[] { "hot", "viewnum", "replynum" },					new String[] { "dateline" }, new String[] { "dateline", "viewnum", "replynum", "hot" });			String sql = "SELECT main.*, field.message FROM sns_blog main LEFT JOIN sns_blogfield field ON field.blogid=main.blogid WHERE "					+ result.get("wheres")					// 词语屏蔽处理					+ " and main.blogid not in (select item_id from sns_wordshield where type='blog' and status='b') ORDER BY main.recommend desc, main."					+ result.get("order") + " " + result.get("sc") + " LIMIT 0,500";			blogs = dataBaseService.executeQuery(sql);			for (Map<String, Object> blog : blogs) {				blog.put("subject", Common.getStr((String) blog.get("subject"), 80, false, false, false, 0, -1, request, response));				blog.put("message", Common.getStr((String) blog.get("message"), 600, false, false, false, 0, -1, request, response));				blog.put("dateline", Common.sgmdate(request, DATE_FORMAT, (Integer) blog.get("dateline"), true));				if (!Common.empty(blog.get("pic"))) {					blog.put("pic", Common.pic_cover_get(sConfig, (String) blog.get("pic"), (Integer) blog.get("picflag")));				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(blogs));			}		}		request.setAttribute("blogs", blogs);		// 图片		List<Map<String, Object>> pics = null;		cachePath = snsRoot + "/data/cache/cache_home_pic.txt";		home = getHome(globalHome, "pic");		if (check_home_cache(home, cachePath, timestamp)) {			pics = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			pics = new ArrayList<Map<String, Object>>();			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "picid", "uid" }, new String[] { "hot" }, new String[] { "dateline" },					new String[] { "dateline", "hot" });			String sql = "SELECT album.albumname, album.friend, space.username, space.name, space.namestatus, main.picid, main.uid, main.dateline, main.filepath, main.thumb, main.remote, main.hot, main.recommend FROM sns_pic main LEFT JOIN sns_album album ON album.albumid=main.albumid LEFT JOIN sns_space space ON space.uid=main.uid WHERE "					+ result.get("wheres") + " ORDER BY main.recommend desc, main." + result.get("order") + " " + result.get("sc") + " LIMIT 0,30";			List<Map<String, Object>> picList = dataBaseService.executeQuery(sql);			for (Map<String, Object> pic : picList) {				if (Common.empty(pic.get("friend"))) {					pic.put("filepath", Common.pic_get(sConfig, (String) pic.get("filepath"), (Integer) pic.get("thumb"), (Integer) pic.get("remote"), true));					pic.put("dateline", Common.sgmdate(request, "MM-dd HH:mm", (Integer) pic.get("dateline"), true));					pic.remove("friend");					pic.remove("thumb");					pic.remove("remote");					pics.add(pic);				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(pics));			}		}		request.setAttribute("pics", pics);		// 话题		List<Map<String, Object>> threads = null;		cachePath = snsRoot + "/data/cache/cache_home_thread.txt";		home = getHome(globalHome, "thread");		if (check_home_cache(home, cachePath, timestamp)) {			threads = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "tid", "uid" }, new String[] { "hot", "viewnum", "replynum" },					new String[] { "dateline", "lastpost" }, new String[] { "dateline", "viewnum", "replynum", "hot" });			String sql = "SELECT main.tid, main.tagid, main.subject, main.uid, main.username, main.hot, m.tagname FROM sns_thread main LEFT JOIN sns_mtag m ON m.tagid=main.tagid WHERE "					+ result.get("wheres") + " ORDER BY main." + result.get("order") + " " + result.get("sc") + " LIMIT 0,20";			threads = dataBaseService.executeQuery(sql);			for (Map<String, Object> thread : threads) {				thread.put("tagname", Common.getStr((String) thread.get("tagname"), 20, false, false, false, 0, 0, request, response));				thread.put("subject", Common.getStr((String) thread.get("subject"), 50, false, false, false, 0, 0, request, response));			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(threads));			}		}		request.setAttribute("threads", threads);		// 活动		Map<Object, Map<String, Object>> globalEventClass = Common.getCacheDate(request, response, "cache/cache_eventclass.jsp", "globalEventClass");		List<Map<String, Object>> events = null;		cachePath = snsRoot + "/data/cache/cache_home_event.txt";		home = getHome(globalHome, "event");		if (check_home_cache(home, cachePath, timestamp)) {			events = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "eventid", "uid" }, new String[] { "hot", "membernum", "follownum" },					new String[] { "dateline" }, new String[] { "dateline", "membernum", "follownum", "hot" });			String sql = "SELECT main.eventid, main.uid, main.username, main.title, main.classid, main.province, main.city, main.location, main.poster, main.thumb, main.remote, main.starttime, main.endtime, main.membernum, main.follownum FROM sns_event main WHERE "					+ result.get("wheres") + " ORDER BY main." + result.get("order") + " " + result.get("sc") + " LIMIT 0,10";			events = dataBaseService.executeQuery(sql);			for (Map<String, Object> event : events) {				event.put("title", Common.getStr((String) event.get("title"), 45, false, false, false, 0, 0, request, response));				String poster = (String) event.get("poster");				if (Common.empty(poster)) {					event.put("poster", globalEventClass.get(event.get("classid")).get("poster"));				} else {					event.put("poster", Common.pic_get(sConfig, poster, (Integer) event.get("thumb"), (Integer) event.get("remote"), true));				}				event.put("starttime", Common.sgmdate(request, DATE_FORMAT, (Integer) event.get("starttime"), false));				event.put("endtime", Common.sgmdate(request, DATE_FORMAT, (Integer) event.get("endtime"), false));				event.remove("classid");				event.remove("thumb");				event.remove("remote");			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(events));			}		}		request.setAttribute("events", events);		// 投票		List<Map<String, Object>> polls = null;		cachePath = snsRoot + "/data/cache/cache_home_poll.txt";		home = getHome(globalHome, "poll");		if (check_home_cache(home, cachePath, timestamp)) {			polls = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "pid", "uid" }, new String[] { "hot", "voternum", "replynum" },					new String[] { "dateline" }, new String[] { "dateline", "voternum", "replynum", "hot" });			String sql = "SELECT main.pid, main.uid, main.username, main.subject, main.voternum FROM sns_poll main WHERE " + result.get("wheres")					+ " ORDER BY main." + result.get("order") + " " + result.get("sc") + " LIMIT 0,20";			polls = dataBaseService.executeQuery(sql);			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(polls));			}		}		request.setAttribute("polls", polls);		// 分享		List<Map<String, Object>> shares = null;		cachePath = snsRoot + "/data/cache/cache_home_share.txt";		home = getHome(globalHome, "share");		if (check_home_cache(home, cachePath, timestamp)) {			shares = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<String, String> result = mk_home_sql(home, timestamp, new String[] { "sid", "uid" }, new String[] { "hot" }, new String[] { "dateline" },					new String[] { "dateline", "hot" });			String sql = "SELECT * FROM sns_share main LEFT JOIN sns_space space ON space.uid=main.uid WHERE " + result.get("wheres") + " ORDER BY main."					+ result.get("order") + " " + result.get("sc") + " LIMIT 0,200";			shares = dataBaseService.executeQuery(sql);			for (Map<String, Object> share : shares) {				Map<String, String> bodyData = Serializer.unserialize((String) share.get("body_data"), false);				String type = (String) share.get("type");				boolean iscut = false;				if (!Common.empty(bodyData)) {					Set<String> keys = bodyData.keySet();					for (String key : keys) {						if (!iscut && ("blog".equals(type) || "thread".equals(type))) {							bodyData.put("message", Common.cutstr(bodyData.get("message"), 40));							iscut = true;						}						if (!iscut && "poll".equals(type)) {							String subject = bodyData.get("subject");							List<String> strList = Common.pregMatch(subject, "(?is)<a href=\"(.+?)\">(.+?)</a>");							if (strList.size() > 0) {								subject = "<a href=\"" + strList.get(1) + "\">" + Common.cutstr(strList.get(2), 40) + "</a>";							}							bodyData.put("subject", subject);							iscut = true;						}						String body_template = ((String) share.get("body_template")).replace("{" + key + "}", bodyData.get(key));						share.put("body_template", body_template);					}				}				share.put("body_data", bodyData);				share.put("dateline", Common.sgmdate(request, DATE_FORMAT, (Integer) share.get("dateline"), true));				share.put("body_general", Common.cutstr((String) share.get("body_general"), 40));			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(shares));			}		}		request.setAttribute("shares", shares);		// 热闹		List<Map<String, Object>> topics = null;		cachePath = snsRoot + "/data/cache/cache_home_topic.txt";		home = getHome(globalHome, "topic");		if (check_home_cache(home, cachePath, timestamp)) {			topics = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			topics = dataBaseService.executeQuery("SELECT * FROM sns_topic ORDER BY joinnum DESC LIMIT 0,20");			for (Map<String, Object> value : topics) {				value.put("pic", Common.pic_get(sConfig, (String) value.get("pic"), (Integer) value.get("thumb"), (Integer) value.get("remote"), true));				value.put("lastpost", Common.sgmdate(request, "MM-dd HH:mm", (Integer) value.get("lastpost")));				value.put("dateline", Common.sgmdate(request, "MM-dd HH:mm", (Integer) value.get("dateline")));				value.put("endtime", Common.empty(value.get("endtime")) ? null : Common.sgmdate(request, "MM-dd HH:mm", (Integer) value.get("endtime")));				try {					value.put("message", Common.getStr((String) value.get("message"), 200, false, false, false, 0, -1, request, response));				} catch (Exception e) {				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(topics));			}		}		request.setAttribute("topics", topics);		// 群组		List<Map<String, Object>> mtags = null;		cachePath = snsRoot + "/data/cache/cache_home_mtag.txt";		home = getHome(globalHome, "mtag");		if (check_home_cache(home, cachePath, timestamp)) {			mtags = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			Map<Integer, Map<String, Object>> globalProfield = Common.getCacheDate(request, response, "cache/cache_profield.jsp", "globalProfield");			mtags = dataBaseService.executeQuery("SELECT * FROM sns_mtag ORDER BY membernum DESC LIMIT 0,20");			for (Map<String, Object> value : mtags) {				Map<String, Object> profield = globalProfield.get(value.get("fieldid"));				value.put("title", profield == null ? "" : profield.get("title").toString());				if (Common.empty(value.get("pic"))) {					value.put("pic", "image/nologo.jpg");				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(mtags));			}		}		request.setAttribute("mtags", mtags);		// 呻吟		List<Map<String, Object>> doings = null;		cachePath = snsRoot + "/data/cache/cache_home_doing.txt";		home = getHome(globalHome, "doing");		if (check_home_cache(home, cachePath, timestamp)) {			doings = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			// 设置词语屏蔽处理			String whereSQL = " where a.doid not in (select item_id from sns_wordshield b where type='doing' and status='b')";			String sql = "SELECT doid, uid, username, dateline, message  FROM sns_doing a " + whereSQL + " ORDER BY dateline DESC LIMIT 0,20";			doings = dataBaseService.executeQuery(sql);			if (doings.size() > 0) {				for (Map<String, Object> doing : doings) {					doing.put("title", Common.getStr((String) doing.get("message"), 0, false, false, false, 0, -1, request, response));					doing.put("dateline", Common.sgmdate(request, TIME_FORMAT, (Integer) (Integer) doing.get("dateline"), true));				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(doings));			}		}		request.setAttribute("doings", doings);		// 标签		List<Map<String, Object>> tags = null;		cachePath = snsRoot + "/data/cache/cache_home_tag.txt";		home = getHome(globalHome, "tag");		if (check_home_cache(home, cachePath, timestamp)) {			tags = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			tags = dataBaseService.executeQuery("SELECT * FROM sns_tag ORDER BY blognum DESC LIMIT 0,100");			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(tags));			}		}		request.setAttribute("tags", tags);				// 旅游聚焦		List<Map<String, Object>> recommend_threads = null;		cachePath = snsRoot + "/data/cache/cache_home_recommend_thread.txt";		home = getHome(globalHome, "recommend_thread");		if (check_home_cache(home, cachePath, timestamp)) {			recommend_threads = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			String select_sql = "select e.* from sns_mtag a left join sns_tagspace b on a.tagid = b.tagid left join sns_space c on b.uid = c.uid left join sns_usergroup d on c.groupid = d .gid right join sns_thread e on a.tagid = e.tagid ";			// b.grade >= 8 and d.gid = 3 群主为vip			// e.digest > 0 精华话题			String sql = select_sql + " where b.grade >= 8 and d.gid = 3 and e.digest > 0 order by e.displayorder desc, lastpost desc limit 0,20";			recommend_threads = dataBaseService.executeQuery(sql);			for (Map<String, Object> thread : recommend_threads) {				if (!Common.empty(thread.get("pic"))) {					thread.put("pic", Common.pic_cover_get(sConfig, (String) thread.get("pic"), 0));				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(recommend_threads));			}		}		request.setAttribute("recommend_threads", recommend_threads);		// 推荐景点		List<Map<String, Object>> recommend_threads2 = null;		cachePath = snsRoot + "/data/cache/cache_home_recommend_thread2.txt";		home = getHome(globalHome, "recommend_thread2");		if (check_home_cache(home, cachePath, timestamp)) {			recommend_threads2 = Serializer.unserialize(FileHelper.readFile(cachePath));		} else {			String select_sql = "select e.*, f.pic from sns_mtag a left join sns_tagspace b on a.tagid = b.tagid left join sns_space c on b.uid = c.uid left join sns_usergroup d on c.groupid = d .gid right join sns_thread e on a.tagid = e.tagid left join sns_post f on e.tid = f.tid ";			// b.grade >= 8 and d.gid = 3 群主为vip			// and f.pic is not null and f.pic != '' 必须有图片			// g.fieldid = 1 群组分类为景区分类			String sql = select_sql + " left join sns_profield g on a.fieldid = g.fieldid ";			sql += " where b.grade >= 8 and d.gid = 3 and f.pic is not null and f.pic != '' and f.pic != 'null' and g.fieldid = 1 order by e.displayorder desc, lastpost desc limit 0,20";			recommend_threads2 = dataBaseService.executeQuery(sql);			for (Map<String, Object> thread : recommend_threads2) {				if (!Common.empty(thread.get("pic"))) {					thread.put("pic", Common.pic_cover_get(sConfig, (String) thread.get("pic"), 0));				}			}			if ((Integer) home.get("cache") > 0) {				FileHelper.writeFile(cachePath, Serializer.serialize(recommend_threads2));			}		}		request.setAttribute("recommend_threads2", recommend_threads2);		// 竞价排名		List<Map<String, Object>> stars = null;		Object spaceBarUserName = sConfig.get("spacebarusername");		if (!Common.empty(spaceBarUserName)) {			stars = dataBaseService.executeQuery("SELECT * FROM sns_space WHERE username IN (" + Common.sImplode(spaceBarUserName.toString().split(",")) + ") ORDER BY rand() limit 1");		}		List<Map<String, Object>> shows = dataBaseService.executeQuery("SELECT sh.note, s.* FROM sns_show sh LEFT JOIN sns_space s ON s.uid=sh.uid ORDER BY sh.credit DESC LIMIT 0,100");		if (shows.size() > 0) {			for (Map<String, Object> show : shows) {				show.put("note", Common.addSlashes(Common.getStr((String) show.get("note"), 80, false, false, false, 0, -1, request, response)));			}			if (Common.empty(stars)) {				stars = Common.getRandList(shows, 1);			}			request.setAttribute("shows", shows);		}				// 推荐人物		if (!Common.empty(stars)) {			Map<String, Object> star = stars.get(0);			star.put("updatetime", Common.sgmdate(request, "HH:mm", star.get("updatetime") == null ? 0 : (Integer) star.get("updatetime"), true));			request.setAttribute("star", star);		}				// 用户		List<Map<String, Object>> users = null;		users = dataBaseService.executeQuery("SELECT a.sex,b.* FROM sns_spacefield a,sns_space b where a.uid=b.uid order by b.viewnum desc LIMIT 0,100");		request.setAttribute("users", users);						// 在线用户		List<Map<String, Object>> onlines = dataBaseService				.executeQuery("SELECT s.*, sf.note FROM sns_session s LEFT JOIN sns_spacefield sf ON sf.uid=s.uid WHERE s.magichidden = 0 ORDER BY s.lastactivity DESC LIMIT 0,100");		if (onlines.size() > 0) {			for (Map<String, Object> online : onlines) {				online.put("note", Common.sHtmlSpecialChars(Common.stripTags((String) online.get("note"))));			}			if (Common.empty(stars)) {				stars = Common.getRandList(onlines, 1);				for (Map<String, Object> value : stars) {					List<Map<String, Object>> query = dataBaseService.executeQuery("SELECT * FROM sns_space WHERE uid='" + value.get("uid") + "'");					if (query.size() > 0) {						value.putAll(query.get(0));					}				}			}			request.setAttribute("onlines", onlines);		}		// 在线人数		request.setAttribute("onlineCount", dataBaseService.findRows("SELECT COUNT(*) FROM sns_session"));		Map<String, String> sCookie = (Map<String, String>) request.getAttribute("sCookie");		String loginUser = sCookie.get("loginuser");		request.setAttribute("memberName", Common.empty(loginUser) ? "" : Common.stripSlashes(loginUser));		request.setAttribute("tpl_css", "home");		return include(request, response, sConfig, sGlobal, "home.jsp");	}	private Map<String, Object> getHome(Map<String, Map<String, Object>> globalHome, String type) {		Map<String, Object> home = globalHome.get(type);		if (Common.empty(home)) {			home = new HashMap<String, Object>();		}		Object cache = home.get("cache");		if (Common.empty(cache)) {			home.put("cache", 600);// 如果没有该缓存有效时间就设为每10分钟更新一次		}		return home;	}	private boolean check_home_cache(Map<String, Object> home, String filePath, int timestamp) {		File cacheFile = new File(filePath);		int cacheTime = (int) (cacheFile.lastModified() / 1000);		Integer cacheMaxTime = (Integer) home.get("cache");		if (timestamp - cacheTime < cacheMaxTime) {			return true;		}		return false;	}	private Map<String, String> mk_home_sql(Map<String, Object> home, int timestamp, String[] ids, String[] crops, String[] days, String[] orders) {		StringBuffer wheres = new StringBuffer();		wheres.append("1");		for (String id : ids) {			Object value = home.get(id);			if (!Common.empty(value)) {				wheres.append(" AND main." + id + " IN (" + value + ")");			}		}		for (String crop : crops) {			String crop1 = crop + "1";			String crop2 = crop + "2";			Object value1 = home.get(crop1);			Object value2 = home.get(crop2);			if (!Common.empty(value1)) {				wheres.append(" AND main." + crop + " >= '" + value1 + "'");			}			if (!Common.empty(value2)) {				wheres.append(" AND main." + crop + " <= '" + value2 + "'");			}		}		for (String day : days) {			Object value = home.get(day);			if (!Common.empty(value)) {				int daytime = timestamp - (Integer) value * 3600 * 24;				wheres.append(" AND main." + day + " >= '" + daytime + "'");			}		}		String order = Common.in_array(orders, home.get("order")) ? home.get("order").toString() : orders[1];		String sc = Common.in_array(new String[] { "desc", "asc" }, home.get("sc")) ? home.get("sc").toString() : "desc";		Map<String, String> result = new HashMap<String, String>();		result.put("wheres", wheres.toString());		result.put("order", order);		result.put("sc", sc);		return result;	}}