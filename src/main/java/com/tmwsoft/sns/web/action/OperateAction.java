package com.tmwsoft.sns.web.action;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.PrintWriter;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.security.KeyManagementException;import java.security.NoSuchAlgorithmException;import java.security.cert.CertificateException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.net.ssl.SSLContext;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import net.sf.json.JSONObject;import org.apache.commons.fileupload.FileItem;import org.apache.commons.lang.StringUtils;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.CoreConnectionPNames;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.util.CookieHelper;import com.tmwsoft.sns.util.FileHelper;import com.tmwsoft.sns.util.FileUploadUtil;import com.tmwsoft.sns.util.Mail;import com.tmwsoft.sns.util.Serializer;import com.tmwsoft.sns.util.SysConstants;public class OperateAction extends BaseAction {	private static final String[] acs = { "login", "register", "lostpasswd", "swfupload", "inputpwd", "ajax", "seccode", "sendmail", "stat", "emailcheck", "bindingPage" };	private static final Map<String, String> tableNames = new HashMap<String, String>();	static {		tableNames.put("qq", "sns_qqlogin");// 主要是用来对应表名		tableNames.put("sina", "sns_qqlogin");// 第三方登陆保存的第三方登陆信息的表名		tableNames.put("renren", "sns_qqlogin");	}	@SuppressWarnings("unchecked")	@Override	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		Map<String, Object> sCookie = (Map<String, Object>) request.getAttribute("sCookie");		String state = request.getParameter("state");// 邵林，QQ登陆返回的参数，本参数名称只能是state		String ac = request.getParameter("ac");		if ("qLogin".equals(state)) {// 邵林			if (!"true".equals(request.getParameter("thirdLogin"))) {// 表示不是第三方登陆调用登陆方法				ac = "qLogin";			}		}		if ("bindThird".equals(ac)) {// 邵林绑定第三方帐号			return invokeMethod(this, "do_" + ac, request, response);		}		if (sConfig.get("login_action").equals(ac)) {			ac = "login";		} else if (sConfig.get("register_action").equals(ac)) {			ac = "register";		} else if ("login".equals(ac) || "register".equals(ac)) {			ac = null;		}		if ("qLogin".equals(ac)) {// 邵林			return invokeMethod(this, "do_" + ac, request, response);		}		if (Common.empty(ac) || !Common.in_array(acs, ac)) {			return showMessage(request, response, "enter_the_space", "index.action", 0);		}		request.setAttribute("theUrl", "operate.action?ac=" + ac);		if(!"sns".equals(sCookie.get("currentsite"))) {			CookieHelper.setCookie(request, response, "currentsite", "sns");			sCookie.put("currentsite", "sns");// 用户进入社区首页，设置当前站点为社区		}		return invokeMethod(this, "do_" + ac, request, response);	}	/**	 * 转换QQAPI返回的结果为json对象	 * 	 * @param stringValue	 * @return	 * @throws Exception	 */	private JSONObject parseStringToJSONObject(String stringValue) throws Exception {		stringValue = stringValue.trim();		if (stringValue.startsWith("callback")) {			stringValue = stringValue.substring(stringValue.indexOf("(") + 1, stringValue.lastIndexOf(")") - 1).trim();		}		return JSONObject.fromObject(stringValue);	}	/**	 * 放置昵称和头像到session里面	 * 	 * @param nickName	 *            第三方登陆的昵称，本参数不能为空	 * @param herderIcon	 *            第三方登陆的头像url，本参数不能为空	 * @param request	 * @return HttpServletRequest	 * @throws Exception	 */	private HttpServletRequest putNickNameAndIconInSession(String nickName, String herderIcon, String id, HttpServletRequest request) throws Exception {		HttpSession session = request.getSession();		session.setAttribute("nickName", nickName);		session.setAttribute("herderIcon", herderIcon);		session.setAttribute("primaryKey", id);		session.setAttribute("third", "qq");// 请对应上方的Map<String,String>											// tableNames静态变量填写，没有的可自己添加		return request;	}	/**	 * 访问QQAPI...邵林	 * 	 * @param urlString	 *            API访问连接	 * @return	 * @throws Exception	 * 	 */	private String getDataFromQQApi(String urlString) throws Exception {		String interfaceData = "";		try {			HttpClient httpsClient = getHttpClientInstance();			httpsClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);			HttpGet httpGet = new HttpGet(urlString);			HttpResponse response = httpsClient.execute(httpGet);			// 是否请求正常			if (200 == response.getStatusLine().getStatusCode()) {				// 获取链接返回的数据				HttpEntity resEntity = response.getEntity();				// 获取返回的数据流				BufferedReader input = new BufferedReader(new InputStreamReader(resEntity.getContent(), "UTF-8"));				String tempStr = "";				// 获取返回的内容				while ((tempStr = input.readLine()) != null) {					interfaceData += tempStr.replace("\t", "");				}			}			// 关闭连接			httpGet.abort();		} catch (Exception e) {			e.printStackTrace();		}		return interfaceData;	}	private static X509TrustManager trustManager = new X509TrustManager() {		@Override		public void checkClientTrusted(java.security.cert.X509Certificate[] arg0, String arg1) throws CertificateException {		}		@Override		public void checkServerTrusted(java.security.cert.X509Certificate[] arg0, String arg1) throws CertificateException {		}		@Override		public java.security.cert.X509Certificate[] getAcceptedIssuers() {			return null;		}	};	private static HttpClient getHttpClientInstance() throws KeyManagementException, NoSuchAlgorithmException {		HttpClient client = new DefaultHttpClient();		SSLContext ctx = SSLContext.getInstance("TLS");		ctx.init(null, new TrustManager[] { trustManager }, null);		SSLSocketFactory ssf = new SSLSocketFactory(ctx);		ssf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);		ClientConnectionManager ccm = client.getConnectionManager();		SchemeRegistry sr = ccm.getSchemeRegistry();		sr.register(new Scheme("https", ssf, 443));		client = new DefaultHttpClient(ccm, client.getParams());		return client;	}	// 邵林,跳转到帐号绑定界面	private ActionForward go_bindingPage(HttpServletRequest request, HttpServletResponse response, String msg) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		request.setAttribute("errorMsg", msg);		return include(request, response, sConfig, sGlobal, "do_register_third.jsp");	}	public ActionForward do_bindingPage(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		return include(request, response, sConfig, sGlobal, "do_register_third.jsp");	}	// 邵林 绑定帐号	public ActionForward do_bindThird(HttpServletRequest request, HttpServletResponse response) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		boolean isMember = Boolean.valueOf(request.getParameter("isMember"));		HttpSession session = request.getSession();		String id = session.getAttribute("primaryKey").toString();// 第三方登陆表的id		String nickName = null;		String userName = null;		String password = null;		if (isMember) {// 绑定已有帐号			userName = request.getParameter("loginUserName");			password = request.getParameter("loginPassword");			List<Map<String, Object>> members = dataBaseService.executeQuery("SELECT * FROM sns_member WHERE username = '" + userName + "'");			if (members.isEmpty()) {				return go_bindingPage(request, response, "登陆失败，用户名或密码错误！");			}			Map<String, Object> member = members.get(0);			password = Common.md5(Common.md5(password) + member.get("salt"));			if (!password.equals(member.get("password"))) {				return go_bindingPage(request, response, "登陆失败，用户名或密码错误！");			}			String userid = member.get("uid").toString();			String thirdTable = tableNames.get(session.getAttribute("third").toString());// 第三方登陆表的表名。			String sql2 = "update " + thirdTable + " set memberId = '" + userid + "' where id = '" + id + "'";// 约定所有第三方登陆的表中的外键必须叫memberId,主键不惜叫id			int q = dataBaseService.executeUpdate(sql2);			if (q != 1) {				return go_bindingPage(request, response, "绑定失败，请重试！");			}		} else {// 新注册帐号			nickName = request.getParameter("nickname");			userName = request.getParameter("username");			password = request.getParameter("password");			String email = request.getParameter("email").toString();			String salt = Common.getRandStr(6, false);			password = Common.md5(Common.md5(password) + salt);			Map<String, Object> insertData = new HashMap<String, Object>();			insertData.put("username", userName);			insertData.put("password", password);			insertData.put("blacklist", "");			insertData.put("salt", salt);			// 插入用户			int uid = dataBaseService.insertTable("sns_member", insertData, true, false);			// 记录第三方登陆绑定信息			String thirdTable = tableNames.get(session.getAttribute("third").toString());// 第三方登陆表的表名。			String sql2 = "update " + thirdTable + " set memberId = '" + uid + "' where id = '" + id + "'";// 约定所有第三方登陆的表中的外键必须叫memberId,主键不惜叫id			int q = dataBaseService.executeUpdate(sql2);			if (q != 1) {				return go_bindingPage(request, response, "绑定失败，请重试！");			}			// 开通用户空间			zoneService.openSpace(request, response, sGlobal, sConfig, uid, userName, 0, email);			// 将用户名加入缓存			Map<Integer, String> sNames = (Map<Integer, String>) request.getAttribute("sNames");			Common.realname_set(sNames, uid, userName, nickName, null, 0);		}		ActionForward af = new ActionForward();		String paras = "ac=" + sConfig.get("login_action") + "&username=" + userName + "&password=" + password + "&loginsubmit=登陆&thirdLogin=true";		af.setPath("/operate.action?" + paras);		return af;	}	// 邵林，已经绑定帐号，直接登陆	public ActionForward do_ThirdLogin(HttpServletRequest request, HttpServletResponse response, Object uid) throws Exception {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		List<Map<String, Object>> members = dataBaseService.executeQuery("select username,password from sns_member where uid = '" + uid.toString() + "'");		if (members.size() > 0) {			String userName = members.get(0).get("username").toString();			String password = members.get(0).get("password").toString();			ActionForward af = new ActionForward();			String paras = "ac=" + sConfig.get("login_action") + "&username=" + userName + "&password=" + password + "&loginsubmit=登陆&thirdLogin=true";			af.setPath("/operate.action?" + paras);			return af;		} else {			return showMessage(request, response, "登陆失败，帐号异常，请联系管理员！");		}	}	// 邵林	public ActionForward do_qLogin(HttpServletRequest request, HttpServletResponse response) throws Exception {		String conTextPath = request.getContextPath();		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String code = request.getParameter("code");// QQ登陆成功返回Authorization													// Code，有效期10分钟,		// 开始获取access_token		String urlToken = "https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&client_id=100279664&client_secret=eb6c31afeaa6c776305fd45e12198458&code="				+ code + "&state=" + request.getParameter("state") + "&redirect_uri=http://www.lysns.net" + conTextPath + "/operate.action";		String tokenString = this.getDataFromQQApi(urlToken);// 得到返回的字符串		String access_token = "";// access token有效期为90天，每次调用api成功，自动续期90天。、		String expires_in = "";// expires_in是该access_token的有效期，单位为秒。该参数暂时未使用		if (tokenString.indexOf("access_token") >= 0) {			String[] bakStrings = tokenString.split("&");			access_token = bakStrings[0].split("=")[1];			expires_in = bakStrings[1].split("=")[1];			log.debug("access_token:" + access_token);		} else {			log.debug("access_token获取失败。返回值：" + tokenString);			return showMessage(request, response, "QQ登陆失败！");		}		// 获取access_token结束		// ----------开始获取openid		String getOpenIdURL = "https://graph.qq.com/oauth2.0/me?access_token=" + access_token;		String openidData = this.getDataFromQQApi(getOpenIdURL);// 得到openid{"client_id":"YOUR_APPID","openid":"YOUR_OPENID"}		JSONObject openidJSONObject = this.parseStringToJSONObject(openidData);		String openId = openidJSONObject.get("openid").toString();		// ----------获取openid结束		/**		 * 得到用户信息 ret: 返回码 msg: 如果ret<0，会有相应的错误信息提示，返回数据全部用UTF-8编码> nickname: 昵称		 * figureurl: 大小为30×30像素的头像URL figureurl_1: 大小为50×50像素的头像URL		 * figureurl_2: 大小为100×100像素的头像URL gender: 性别。如果获取不到则默认返回“男” vip:		 * 标识用户是否为黄钻用户（0：不是；1：是） level: 黄钻等级（如果是黄钻用户才返回此参数）		 */		String userInfoURL = "https://graph.qq.com/user/get_user_info?access_token=" + access_token + "&oauth_consumer_key=100279664&openid=" + openId;		JSONObject userData = parseStringToJSONObject(this.getDataFromQQApi(userInfoURL));		String nickname = userData.get("nickname").toString();		String figureurl = userData.get("figureurl").toString();		List<Map<String, Object>> query = dataBaseService.executeQuery("select memberId uid,id from sns_qqlogin where openId = '" + openId + "'");		int result = query.size();// Integer.valueOf(query.get(0).get("uid").toString());		if (result == 0) {// 没有数据，新增数据并跳转到注册页面绑定帐号			Date registerDate = new Date();			String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(registerDate);			String sql = "insert into sns_qqlogin (openId,accessToken,accessTime,lastLoginTime) values ('" + openId + "','" + access_token + "','" + time					+ "','" + time + "')";			int id = dataBaseService.insert(sql);			request = this.putNickNameAndIconInSession(nickname, figureurl, id + "", request);// 放置昵称和头像openid到session里面			return go_bindingPage(request, response, null);// 跳转到帐号绑定页面		} else if (result == 1) {			String id = query.get(0).get("id").toString();			request = this.putNickNameAndIconInSession(nickname, figureurl, id, request);// 放置昵称和头像openid到session里面			Object uid = query.get(0).get("uid");			if (uid == null || "".equals(uid.toString())) {				return go_bindingPage(request, response, null);// 跳转到帐号绑定页面			} else {				String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());				String sql = "update sns_qqlogin set lastLoginTime = '" + time + "',accessToken ='" + access_token + "' where openId = '" + openId + "'";				int r = dataBaseService.executeUpdate(sql);				if (r != 1) {					return showMessage(request, response, "登陆失败，请重试！");				}				return do_ThirdLogin(request, response, uid);			}		} else {			log.error("登陆失败，用户重复，openId=" + openId);			return showMessage(request, response, "登陆失败，帐号异常，请联系管理员！");		}	}	@SuppressWarnings("unchecked")	public ActionForward do_ajax(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String op = request.getParameter("op");		if ("comment".equals(op)) {			int cid = Common.empty(request.getParameter("cid")) ? 0 : Common.intval(request.getParameter("cid"));			int ajaxEdit = 0;			String cidSql = null;			if (cid != 0) {				cidSql = "cid='" + cid + "' AND";				ajaxEdit = 1;			} else {				cidSql = "";				ajaxEdit = 0;			}			List<Map<String, Object>> query = dataBaseService.executeQuery("SELECT * FROM sns_comment WHERE " + cidSql + " authorid='"					+ sGlobal.get("supe_uid") + "' ORDER BY dateline DESC LIMIT 0,1");			request.setAttribute("list", query);			request.setAttribute("ajax_edit", ajaxEdit);		} else if ("getfriendgroup".equals(op)) {			int uid = Common.intval(request.getParameter("uid"));			Map<String, Object> friend = null;			if (!Common.empty(sGlobal.get("supe_uid")) && uid != 0) {				Map<String, Object> space = Common.getSpace(request, sGlobal, sConfig, sGlobal.get("supe_uid"));				List<Map<String, Object>> friendList = dataBaseService.executeQuery("SELECT * FROM sns_friend WHERE uid='" + sGlobal.get("supe_uid")						+ "' AND fuid='" + uid + "'");				if (!friendList.isEmpty()) {					friend = friendList.get(0);				}				request.setAttribute("space", space);			}			Map<Integer, String> groups = Common.getFriendGroup(request);			if (friend == null || Common.empty(friend.get("gid"))) {				friend = friend == null ? new HashMap<String, Object>() : friend;				friend.put("gid", 0);			}			request.setAttribute("group", groups.get(friend.get("gid")));		} else if ("getfriendname".equals(op)) {			int group = Common.intval(request.getParameter("group"));			if (!Common.empty(sGlobal.get("supe_uid")) && group != 0) {				Map<String, Object> space = Common.getSpace(request, sGlobal, sConfig, sGlobal.get("supe_uid"));				request.setAttribute("space", space);				Map<Integer, String> groups = Common.getFriendGroup(request);				request.setAttribute("groupname", groups.get(group));			}		} else if ("getmtagmember".equals(op)) {		} else if ("share".equals(op)) {			List<Map<String, Object>> query = dataBaseService.executeQuery("SELECT * FROM sns_share WHERE uid='" + sGlobal.get("supe_uid")					+ "' ORDER BY dateline DESC LIMIT 0,1");			Map<String, Object> share = query.size() > 0 ? query.get(0) : null;			if (!Common.empty(share)) {				Common.mkShare(share);			}			request.setAttribute("share", share);		} else if ("post".equals(op)) {			int pid = Common.intval(request.getParameter("pid"));			String pidSQL = null;			if (pid > 0) {				pidSQL = " WHERE pid='" + pid + "'";			} else {				pidSQL = "";				request.setAttribute("ajax_edit", 0);			}			List<Map<String, Object>> list = dataBaseService.executeQuery("SELECT * FROM sns_post " + pidSQL + " ORDER BY dateline DESC LIMIT 0,1");			if (!list.isEmpty()) {				Map<String, Object> postValue = list.get(0);				request.setAttribute("postValue", postValue);			}		} else if ("album".equals(op)) {			int id = Common.empty(request.getParameter("id")) ? 0 : Common.intval(request.getParameter("id"));			int start = Common.empty(request.getParameter("start")) ? 0 : Common.intval(request.getParameter("start"));			if (Common.empty(sGlobal.get("supe_uid"))) {				return showMessage(request, response, "to_login", "operate.action?ac=" + sConfig.get("login_action"));			}			int count = 0;			int perPage = 10;			String ret = Common.ckStart(start, perPage, (Integer) sConfig.get("maxpage"));			if (ret != null) {				return showMessage(request, response, ret);			}			List<Map<String, Object>> picList = dataBaseService.executeQuery("SELECT * FROM sns_pic WHERE albumid='" + id + "' AND uid='"					+ sGlobal.get("supe_uid") + "' ORDER BY dateline DESC LIMIT " + start + "," + perPage);			for (Map<String, Object> value : picList) {				value.put("bigpic", Common.pic_get(sConfig, (String) value.get("filepath"), (Integer) value.get("thumb"), (Integer) value.get("remote"), false));				value.put("pic", Common.pic_get(sConfig, (String) value.get("filepath"), (Integer) value.get("thumb"), (Integer) value.get("remote"), true));				count++;			}			try {				String multi = Common.smulti(sGlobal, start, perPage, count, "operate.action?ac=ajax&op=album&id=" + id, request.getParameter("ajaxdiv"));				request.setAttribute("multi", multi);				request.setAttribute("piclist", picList);			} catch (Exception e) {				return showMessage(request, response, e.getMessage());			}		} else if ("docomment".equals(op)) {		} else if ("deluserapp".equals(op)) {		} else if ("getreward".equals(op)) {			Map<String, String> sCookie = (Map<String, String>) request.getAttribute("sCookie");			String reward_log = sCookie.get("reward_log");			if (reward_log != null) {				String[] logs = reward_log.split(",");				if (logs.length == 2) {					int clid = Common.intval(logs[1]);					if (clid > 0) {						Map<String, Map<String, Object>> globalCreditrule = Common.getCacheDate(request, response, "cache/cache_creditrule.jsp",								"globalCreditrule");						List<String> cyclenums = dataBaseService.executeQuery("SELECT cyclenum FROM sns_creditlog WHERE clid=" + clid, 1);						int cyclenum = cyclenums.size() > 0 ? Integer.parseInt(cyclenums.get(0)) : 0;						Map<String, Object> rule = globalCreditrule.get(logs[0]);						int rewardnum = (Integer) rule.get("rewardnum");						rule.put("cyclenum", rewardnum > 0 ? rewardnum - cyclenum : 0);						request.setAttribute("rule", rule);					}				}				CookieHelper.removeCookie(request, response, "reward_log");			}		}		request.setAttribute("op", op);		return include(request, response, sConfig, sGlobal, "do_ajax.jsp");	}	@SuppressWarnings("unchecked")	public ActionForward do_emailcheck(HttpServletRequest request, HttpServletResponse response) {		int uid = 0;		String email = null;		String hash = Common.trim(request.getParameter("hash"));		if (!Common.empty(hash)) {			String[] list = Common.authCode(hash, "DECODE", null, 0).split("\t");			if (list.length == 2) {				uid = Common.intval(list[0]);				email = list[1];			}		}		if (uid > 0 && Common.isEmail(email)) {			Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");			if ((Integer) sConfig.get("uniqueemail") == 1) {				int count = dataBaseService.findRows("SELECT * FROM sns_spacefield WHERE email = '" + email + "' AND emailcheck = 1");				if (count > 0) {					return showMessage(request, response, "uniqueemail_recheck");				}			}			Common.getReward("realemail", true, uid, "", true, request, response);			Map<String, Object> setData = new HashMap<String, Object>();			setData.put("email", Common.addSlashes(email));			setData.put("emailcheck", 1);			setData.put("newemail", "");			Map<String, Object> whereData = new HashMap<String, Object>();			whereData.put("uid", uid);			dataBaseService.updateTable("sns_spacefield", setData, whereData);			return showMessage(request, response, "email_check_sucess", "", 1, email);		} else {			return showMessage(request, response, "email_check_error");		}	}	public ActionForward do_inputpwd(HttpServletRequest request, HttpServletResponse response) {		try {			if (submitCheck(request, "pwdsubmit")) {				int blogId = Common.intval(request.getParameter("blogid"));				int albumId = Common.intval(request.getParameter("albumid"));				Map<String, Object> item = null;				String itemUrl = null;				String cookieName = null;				if (blogId > 0) {					List<Map<String, Object>> items = dataBaseService.executeQuery("SELECT * FROM sns_blog WHERE blogid=" + blogId);					if (items.size() > 0) {						item = items.get(0);						itemUrl = "zone.action?uid=" + item.get("uid") + "&do=blog&id=" + blogId;						cookieName = "view_pwd_blog_" + blogId;					}				} else if (albumId > 0) {					List<Map<String, Object>> items = dataBaseService.executeQuery("SELECT * FROM sns_album WHERE albumid=" + albumId);					if (items.size() > 0) {						item = items.get(0);						itemUrl = "zone.action?uid=" + item.get("uid") + "&do=album&id=" + albumId;						cookieName = "view_pwd_album_" + albumId;					}				}				if (Common.empty(item)) {					return showMessage(request, response, "news_does_not_exist");				}				String password = (String) item.get("password");				if (!Common.empty(password) && password.equals(request.getParameter("viewpwd"))) {					CookieHelper.setCookie(request, response, cookieName, Common.md5(Common.md5(password)));					return showMessage(request, response, "proved_to_be_successful", itemUrl);				} else {					return showMessage(request, response, "password_is_not_passed", itemUrl);				}			}		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		return null;	}	@SuppressWarnings("unchecked")	public ActionForward do_login(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int supe_uid = (Integer) sGlobal.get("supe_uid");		if (supe_uid > 0) {			return showMessage(request, response, "do_success", "zone.action", 0);		}		int uid = Common.intval(request.getParameter("uid"));		String code = Common.trim(request.getParameter("code"));		int app = Common.intval(request.getParameter("app"));		String invite = Common.trim(request.getParameter("invite"));		Map<String, Object> invits = null;		Map<Integer, String> sNames = (Map<Integer, String>) request.getAttribute("sNames");		if (uid > 0 && code.length() > 0) {			Map<String, Integer> reward = Common.getReward("invitecode", false, 0, "", true, request, response);			if (reward.get("credit") == 0) {				Map<String, Object> mSpace = Common.getSpace(request, sGlobal, sConfig, uid);				if (code.equals(Common.spaceKey(mSpace, sConfig, app))) {					invits = new HashMap<String, Object>();					invits.put("id", 0);					invits.put("uid", uid);					invits.put("username", mSpace.get("username"));				}				request.setAttribute("url_plus", "uid=" + uid + "&app=" + app + "&code=" + code);			}		} else if (uid > 0 && invite.length() > 0) {			invits = mainService.getInvite(sGlobal, sConfig, sNames, uid, invite);			request.setAttribute("url_plus", "uid=" + uid + "&invite=" + invite);		}		sGlobal.put("nologinform", 1);		int seccode_login = (Integer) sConfig.get("seccode_login");		try {			if (submitCheck(request, "loginsubmit")) {				String userName = request.getParameter("username");				if (Common.empty(userName)) {					return showMessage(request, response, "users_were_not_empty_please_re_login", "operate.action?ac=" + sConfig.get("login_action"));				}				String password = request.getParameter("password");				int cookieTime = Common.intval(request.getParameter("cookietime"));				if (seccode_login == 1 && !mainService.checkSeccode(request, response, sGlobal, sConfig, request.getParameter("seccode"))) {					sGlobal.put("input_seccode", 1);					request.setAttribute("invits", invits);					request.setAttribute("memberName", userName);					request.setAttribute("password", password);					if (cookieTime > 0) {						request.setAttribute("cookieCheck", " checked");					}					return include(request, response, sConfig, sGlobal, "do_login.jsp");				}				List<Map<String, Object>> members = dataBaseService.executeQuery("SELECT * FROM sns_member WHERE username = '" + userName + "'");				if (members.isEmpty()) {					return showMessage(request, response, "login_failure_please_re_login", "operate.action?ac=" + sConfig.get("login_action"));				}				Map<String, Object> member = members.get(0);				if (!"true".equals(request.getParameter("thirdLogin"))) {// 邵林					password = Common.md5(Common.md5(password) + member.get("salt"));				}				if (!password.equals(member.get("password"))) {					return showMessage(request, response, "login_failure_please_re_login", "operate.action?ac=" + sConfig.get("login_action"));				}				List<Map<String, Object>> spaces = dataBaseService.executeQuery("SELECT * FROM sns_space WHERE uid=" + member.get("uid"));				Map<String, Object> space = null;				if (spaces.isEmpty()) {					space = zoneService.openSpace(request, response, sGlobal, sConfig, (Integer) member.get("uid"), (String) member.get("username"), 0, "");				} else {					space = spaces.get(0);				}				sGlobal.put("member", space);				zoneService.insertSession(request, response, sGlobal, sConfig, (Integer) member.get("uid"), (String) member.get("username"),						(String) member.get("password"));				CookieHelper.setCookie(request, response, "auth", Common.authCode(member.get("password") + "\t" + member.get("uid"), "ENCODE", null, 0), cookieTime == 0 ? -1 : cookieTime);				CookieHelper.setCookie(request, response, "loginuser", (String) member.get("username"), cookieTime == 0 ? 30 * 60 * 1000 : cookieTime);				CookieHelper.removeCookie(request, response, "_refer");				if (invits != null) {					mainService.updateInvite(request, response, sGlobal, sConfig, sNames, (Integer) invits.get("id"), (Integer) member.get("uid"),							(String) member.get("username"), (Integer) invits.get("uid"), (String) invits.get("username"), app);				}				sGlobal.put("supe_uid", space.get("uid"));				Map<String, Object> setData = new HashMap<String, Object>();				boolean avatarExists = mainService.ckavatar(sGlobal, sConfig, (Integer) space.get("uid"));				int avatar = (Integer) space.get("avatar");				if (avatarExists) {					if (avatar == 0) {						Map<String, Integer> reward = Common.getReward("setavatar", false, 0, "", true, request, response);						int credit = reward.get("credit");						int experience = reward.get("experience");						if (credit > 0) {							setData.put("credit", "credit=credit+" + credit);						}						if (experience > 0) {							setData.put("experience", "experience=experience+" + experience);						}						setData.put("avatar", "avatar=1");						setData.put("updatetime", "updatetime=" + sGlobal.get("timestamp"));					}				} else if (avatar > 0) {					setData.put("avatar", "avatar=0");				}				if (setData.size() > 0) {					dataBaseService.executeUpdate("UPDATE sns_space SET " + Common.implode(setData, ",") + " WHERE uid='" + space.get("uid") + "'");				}				request.getSession().setAttribute("User", userName);				String refer = Common.getReferer(request, false);				String returnPath = "";				if(app > 0) {					returnPath = "userapp.action?id=" + app;				} else {					int allowRewrite = (Integer) sConfig.get("allowrewrite");					String indexPath = allowRewrite == 0 ? "portal.action" : "portal.html";					if("zone-home.html".equals(refer) || "zone.action?do=home".equals(refer)) {						returnPath = indexPath;					} else {						returnPath = refer;					}				}								return showMessage(request, response, "login_success", returnPath, 1, "");			}		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		Map<String, String> sCookie = (Map<String, String>) request.getAttribute("sCookie");		String refer = request.getParameter("refer");		if (Common.empty(refer)) {			refer = sCookie.get("_refer");			refer = Common.empty(refer) ? "" : Common.urlDecode(refer);		}		List<String> ms = Common.pregMatch(refer, "(?i)(backstage|operate|main)\\.action\\?ac\\=([a-z]+)");		if (ms.size() == 3) {			if (!"cp".equals(ms.get(1)) || !"sendmail".equals(ms.get(2))) {				refer = null;			}		}		if (Common.empty(refer)) {			refer = Common.getReferer(request, true);		}		request.setAttribute("refer", refer);		String loginUser = sCookie.get("loginuser");		if (!Common.empty(loginUser)) {			request.setAttribute("memberName", Common.stripSlashes(loginUser));		}		request.setAttribute("cookieCheck", " checked");		request.setAttribute("invits", invits);		request.setAttribute("formhash", formHash(request));		return include(request, response, sConfig, sGlobal, "do_login.jsp");	}	@SuppressWarnings("unchecked")	public ActionForward do_lostpasswd(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String op = Common.trim(request.getParameter("op"));		try {			if (submitCheck(request, "lostpwsubmit")) {				List<Map<String, Object>> spaceInfos = dataBaseService						.executeQuery("SELECT s.uid, s.groupid, s.username, s.flag, sf.email, sf.emailcheck FROM sns_space s LEFT JOIN sns_spacefield sf ON sf.uid=s.uid WHERE s.username='"								+ request.getParameter("username") + "'");				if (spaceInfos.isEmpty()) {					return showMessage(request, response, "getpasswd_account_notmatch");				}				Map<String, Object> spaceInfo = spaceInfos.get(0);				String email = (String) spaceInfo.get("email");				if (Common.empty(email) || !Common.isEmail(email)) {					return showMessage(request, response, "getpasswd_account_notmatch");				}				String[] founder = SysConstants.snsConfig.get("founder").split(",");				int flag = (Integer) spaceInfo.get("flag");				if (flag > 0 || Common.in_array(founder, spaceInfo.get("uid")) || Common.checkPerm(request, response, "admin")) {					return showMessage(request, response, "getpasswd_account_invalid");				}				op = "email";				request.setAttribute("username", spaceInfo.get("username"));				request.setAttribute("email", email.substring(email.indexOf("@")));			} else if (submitCheck(request, "emailsubmit")) {				List<Map<String, Object>> spaceInfos = dataBaseService						.executeQuery("SELECT s.uid, s.groupid, s.username, s.flag, sf.email, sf.emailcheck FROM sns_space s LEFT JOIN sns_spacefield sf ON sf.uid=s.uid WHERE s.username='"								+ request.getParameter("username") + "'");				if (spaceInfos.isEmpty()) {					return showMessage(request, response, "getpasswd_email_notmatch");				}				Map<String, Object> spaceInfo = spaceInfos.get(0);				String email = (String) spaceInfo.get("email");				if (Common.empty(email) || !email.equals(request.getParameter("email"))) {					return showMessage(request, response, "getpasswd_email_notmatch");				}				String[] founder = SysConstants.snsConfig.get("founder").split(",");				int flag = (Integer) spaceInfo.get("flag");				if (flag > 0 || Common.in_array(founder, spaceInfo.get("uid")) || Common.checkPerm(request, response, "admin")) {					return showMessage(request, response, "getpasswd_account_invalid");				}				String idString = Common.getRandStr(6, false);				String reSetURL = Common.getSiteUrl(request) + "operate.action?ac=lostpasswd&amp;op=reset&amp;uid=" + spaceInfo.get("uid") + "&amp;id="						+ idString;				Map<String, Object> setData = new HashMap<String, Object>();				setData.put("authstr", sGlobal.get("timestamp") + "\t1\t" + idString);				Map<String, Object> whereData = new HashMap<String, Object>();				whereData.put("uid", spaceInfo.get("uid"));				dataBaseService.updateTable("sns_spacefield", setData, whereData);				String mailSubject = Common.getMessage(request, "cp_get_passwd_subject");				String mailMessage = Common.getMessage(request, "cp_get_passwd_message", reSetURL);				mainService.sendMail(request, response, 0, email, mailSubject, mailMessage, null);				return showMessage(request, response, "getpasswd_send_succeed", "operate.action?ac=" + sConfig.get("login_action"), 5);			} else if (submitCheck(request, "resetsubmit")) {				int uid = Common.intval(request.getParameter("uid"));				String id = Common.trim(request.getParameter("id"));				String newPassword1 = Common.trim(request.getParameter("newpasswd1"));				String newPassword2 = Common.trim(request.getParameter("newpasswd2"));				if (!newPassword1.equals(newPassword2)) {					return showMessage(request, response, "password_inconsistency");				}				if (!newPassword1.equals(Common.addSlashes(newPassword2))) {					return showMessage(request, response, "profile_passwd_illegal");				}				List<Map<String, Object>> spaceInfos = dataBaseService						.executeQuery("SELECT s.uid, s.username, s.groupid, s.flag, sf.email, sf.authstr FROM sns_space s, sns_spacefield sf WHERE s.uid="								+ uid + " AND sf.uid=s.uid");				Map<String, Object> space = null;				if (!spaceInfos.isEmpty()) {					space = spaceInfos.get(0);				}				String result = checkUser(sGlobal, id, space);				if (result != null) {					return showMessage(request, response, result);				}				String[] founder = SysConstants.snsConfig.get("founder").split(",");				int flag = (Integer) space.get("flag");				if (flag > 0 || Common.in_array(founder, space.get("uid")) || Common.checkPerm(request, response, "admin")) {					return showMessage(request, response, "reset_passwd_account_invalid");				}				String salt = Common.getRandStr(6, false);				newPassword1 = Common.md5(Common.md5(newPassword1) + salt);				Map<String, Object> memberData = new HashMap<String, Object>();				memberData.put("password", newPassword1);				memberData.put("salt", salt);				Map<String, Object> spaceFieldData = new HashMap<String, Object>();				spaceFieldData.put("authstr", "");				Map<String, Object> whereData = new HashMap<String, Object>();				whereData.put("uid", uid);				dataBaseService.updateTable("sns_member", memberData, whereData);				dataBaseService.updateTable("sns_spacefield", spaceFieldData, whereData);				return showMessage(request, response, "getpasswd_succeed");			}		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		if ("reset".equals(op)) {			List<Map<String, Object>> spaceInfos = dataBaseService.executeQuery("SELECT s.username, sf.email, sf.authstr FROM "					+ " sns_space s, sns_spacefield sf WHERE s.uid='" + request.getParameter("uid") + "' AND sf.uid=s.uid");			Map<String, Object> space = null;			if (!spaceInfos.isEmpty()) {				space = spaceInfos.get(0);			}			String result = checkUser(sGlobal, request.getParameter("id"), space);			if (result != null) {				return showMessage(request, response, result);			}			request.setAttribute("space", space);		}		request.setAttribute("op", op);		return include(request, response, sConfig, sGlobal, "do_lostpasswd.jsp");	}	@SuppressWarnings("unchecked")	public ActionForward do_register(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int supe_uid = (Integer) sGlobal.get("supe_uid");		if (supe_uid > 0) {			return showMessage(request, response, "do_success", "zone.action?do=home", 0);		}		sGlobal.put("nologinform", 1);		int uid = Common.intval(request.getParameter("uid"));		String code = Common.trim(request.getParameter("code"));		int app = Common.intval(request.getParameter("app"));		String invite = Common.trim(request.getParameter("invite"));		Map<String, Object> invits = null;		Map<Integer, String> sNames = (Map<Integer, String>) request.getAttribute("sNames");		if (uid > 0 && code.length() > 0) {			Map<String, Integer> reward = Common.getReward("invitecode", false, 0, "", true, request, response);			if (reward.get("credit") == 0) {				Map<String, Object> mSpace = Common.getSpace(request, sGlobal, sConfig, uid);				if (code.equals(Common.spaceKey(mSpace, sConfig, app))) {					invits = new HashMap<String, Object>();					invits.put("id", 0);					invits.put("uid", uid);					invits.put("username", mSpace.get("username"));				}				request.setAttribute("url_plus", "uid=" + uid + "&app=" + app + "&code=" + code);			}		} else if (uid > 0 && invite.length() > 0) {			invits = mainService.getInvite(sGlobal, sConfig, sNames, uid, invite);			request.setAttribute("url_plus", "uid=" + uid + "&invite=" + invite);		}		String op = Common.trim(request.getParameter("op"));		if ("checkusername".equals(op)) {			String userName = Common.trim(request.getParameter("username"));			// try {			// /*			// * 2012.5.9 add by solzhang			// * 解决提交中文乱码问题			// */			// userName = new String(userName.getBytes("ISO-8859-1"), "utf-8");			// } catch (UnsupportedEncodingException e) {			// // TODO Auto-generated catch block			// e.printStackTrace();			// }			if (Common.empty(userName)) {				return showMessage(request, response, "user_name_is_not_legitimate");			}			int result = checkName(userName, request, response);			if (result == -1) {				return showMessage(request, response, "user_name_is_not_legitimate");			} else if (result == -2) {				return showMessage(request, response, "include_not_registered_words");			} else if (result == -3) {				return showMessage(request, response, "user_name_already_exists");			} else {				return showMessage(request, response, "succeed");			}		} else if ("checkseccode".equals(op)) {			if (mainService.checkSeccode(request, response, sGlobal, sConfig, Common.trim(request.getParameter("seccode")))) {				return showMessage(request, response, "succeed");			} else {				return showMessage(request, response, "incorrect_code");			}		} else {			if ((Integer) sConfig.get("closeregister") == 1) {				if ((Integer) sConfig.get("closeinvite") == 1) {					return showMessage(request, response, "not_open_registration");				} else if (Common.empty(invits)) {					return showMessage(request, response, "not_open_registration_invite");				}			}			String message = Common.checkClose(request, response, supe_uid);			if (message != null) {				return showMessage(request, response, message);			}			String jumpURL = app > 0 ? "userapp.action?id=" + app + "&my_extra=invitedby_bi_" + uid + "_" + code + "&my_suffix=Lw%3D%3D"					: "zone.action?do=home";			try {				if (submitCheck(request, "registersubmit")) {					if ((Integer) sConfig.get("seccode_register") == 1							&& !mainService.checkSeccode(request, response, sGlobal, sConfig, request.getParameter("seccode"))) {						return showMessage(request, response, "incorrect_code");					}					String password = request.getParameter("password");					String password2 = request.getParameter("password2");					if (Common.empty(password) || !password.equals(Common.addSlashes(password))) {						return showMessage(request, response, "profile_passwd_illegal");					}					if (!password.equals(password2)) {						return showMessage(request, response, "password_inconsistency");					}					String userName = Common.trim(request.getParameter("username"));					int result = checkName(userName, request, response);					if (result == -1) {						return showMessage(request, response, "user_name_is_not_legitimate");					} else if (result == -2) {						return showMessage(request, response, "include_not_registered_words");					} else if (result == -3) {						return showMessage(request, response, "user_name_already_exists");					}					String email = Common.trim(request.getParameter("email"));					if (!Common.isEmail(email)) {						return showMessage(request, response, "email_format_is_wrong");					}					if ((Integer) sConfig.get("checkemail") == 1) {						int count = dataBaseService.findRows("SELECT COUNT(*) FROM sns_spacefield WHERE email='" + email + "'");						if (count > 0) {							return showMessage(request, response, "email_has_been_registered");						}					}					int timestamp = (Integer) sGlobal.get("timestamp");					String onlineIp = Common.getOnlineIP(request);					String regipDateStr = sConfig.get("regipdate").toString();					double regipDate = Double.parseDouble(regipDateStr);					if (regipDate > 0) {						List<String> datelines = dataBaseService.executeQuery("SELECT dateline FROM sns_space WHERE regip='" + onlineIp								+ "' ORDER BY dateline DESC LIMIT 1", 1);						if (datelines.size() > 0) {							if (timestamp - Integer.parseInt(datelines.get(0)) < regipDate * 3600) {								return showMessage(request, response, "regip_has_been_registered", null, 1, regipDateStr);							}						}					}					String salt = Common.getRandStr(6, false);					password = Common.md5(Common.md5(password) + salt);					Map<String, Object> insertData = new HashMap<String, Object>();					insertData.put("username", userName);					insertData.put("password", password);					insertData.put("blacklist", "");					insertData.put("salt", salt);					// 插入用户					int newUid = dataBaseService.insertTable("sns_member", insertData, true, false);					if (newUid <= 0) {						return showMessage(request, response, "register_error");					}					// 开通用户空间					zoneService.openSpace(request, response, sGlobal, sConfig, newUid, userName, 0, email);					// 将用户名加入缓存					Common.realname_set(sNames, newUid, userName, null, null, 0);										// 默认好友设置					String defaultFUserName = (String) sConfig.get("defaultfusername");					if (!Common.empty(defaultFUserName)) {						List<Map<String, Object>> spaces = dataBaseService.executeQuery("SELECT uid,username FROM sns_space WHERE username IN ("								+ Common.sImplode(defaultFUserName.split(",")) + ")");						if (spaces.size() > 0) {							String defaultPoke = Common.addSlashes(Common.trim(sConfig.get("defaultpoke").toString()));							List<Integer> fuids = new ArrayList<Integer>();							List<String> inserts = new ArrayList<String>();							List<String> pokes = new ArrayList<String>();							List<String> flogs = new ArrayList<String>();							for (Map<String, Object> space : spaces) {								space = (Map<String, Object>) Common.sAddSlashes(space);								int fuid = (Integer) space.get("uid");								fuids.add(fuid);								inserts.add("(" + newUid + "," + fuid + ",'" + space.get("username") + "',1," + timestamp + ")");								inserts.add("(" + fuid + "," + newUid + ",'" + userName + "',1," + timestamp + ")");								pokes.add("(" + newUid + "," + fuid + ",'" + space.get("username") + "','" + defaultPoke + "'," + timestamp + ")");								flogs.add("(" + fuid + "," + newUid + ",'add'," + timestamp + ")");							}							dataBaseService									.executeUpdate("REPLACE INTO sns_friend (uid,fuid,fusername,status,dateline) VALUES " + Common.implode(inserts, ","));							dataBaseService									.executeUpdate("REPLACE INTO sns_poke (uid,fromuid,fromusername,note,dateline) VALUES " + Common.implode(pokes, ","));							dataBaseService.executeUpdate("REPLACE INTO sns_friendlog (uid,fuid,action,dateline) VALUES " + Common.implode(flogs, ","));							String friendStr = Common.implode(fuids, ",");							Map<String, Object> whereData = new HashMap<String, Object>();							whereData.put("uid", newUid);							Map<String, Object> setSpaceData = new HashMap<String, Object>();							setSpaceData.put("friendnum", fuids.size());							setSpaceData.put("pokenum", pokes.size());							Map<String, Object> setSpaceFieldData = new HashMap<String, Object>();							setSpaceFieldData.put("friend", friendStr);							setSpaceFieldData.put("feedfriend", friendStr);							dataBaseService.updateTable("sns_space", setSpaceData, whereData);							dataBaseService.updateTable("sns_spacefield", setSpaceFieldData, whereData);							for (Integer fuid : fuids) {								mainService.friendCache(request, sGlobal, sConfig, fuid);							}						}					}					zoneService.insertSession(request, response, sGlobal, sConfig, newUid, userName, password);					CookieHelper.setCookie(request, response, "auth", Common.authCode(password + "\t" + newUid, "ENCODE", null, 0));					CookieHelper.setCookie(request, response, "loginuser", userName, 31536000);					CookieHelper.removeCookie(request, response, "_refer");					if (invits != null) {						mainService.updateInvite(request, response, sGlobal, sConfig, sNames, (Integer) invits.get("id"), newUid, userName,								(Integer) invits.get("uid"), (String) invits.get("username"), app);						dataBaseService.executeUpdate("UPDATE sns_space SET advgiftcount=advgiftcount+3 WHERE uid='" + invits.get("uid") + "'");						if (email.equals(invits.get("email"))) {							Map<String, Object> whereData = new HashMap<String, Object>();							whereData.put("uid", newUid);							Map<String, Object> setSpaceFieldData = new HashMap<String, Object>();							setSpaceFieldData.put("emailcheck", 1);							dataBaseService.updateTable("sns_spacefield", setSpaceFieldData, whereData);						}						if (app > 0) {							mainService.updateStat(sGlobal, sConfig, "appinvite", false);						} else {							mainService.updateStat(sGlobal, sConfig, "invite", false);						}					}					if ((Integer) sConfig.get("my_status") == 1) {						Map<String, Object> insertUserLogData = new HashMap<String, Object>();						insertUserLogData.put("uid", newUid);						insertUserLogData.put("action", "add");						insertUserLogData.put("dateline", timestamp);						dataBaseService.insertTable("sns_userlog", insertUserLogData, false, true);					}					request.getSession().setAttribute("User", userName);					return showMessage(request, response, "registered", jumpURL);				}			} catch (Exception e) {				return showMessage(request, response, e.getMessage());			}			String registerRule = Common.getData("registerrule");			request.setAttribute("registerRule", registerRule);			request.setAttribute("jumpURL", jumpURL);			request.setAttribute("invits", invits);			return include(request, response, sConfig, sGlobal, "do_register.jsp");		}	}	@SuppressWarnings("unchecked")	public ActionForward do_sendmail(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		int perNum = 1;		CookieHelper.setCookie(request, response, "sendmail", "1", 300);		File lockFile = new File(SysConstants.snsRoot + "/data/sendmail.lock");		long lastModified = lockFile.lastModified();		long starttime = (Long) sGlobal.get("starttime");		if (starttime - lastModified < 5) {			return null;		}		if (lastModified == 0) {			try {				lockFile.createNewFile();			} catch (IOException e1) {				e1.printStackTrace();			}		}		lockFile.setLastModified(starttime);		int timestamp = (Integer) sGlobal.get("timestamp");		List<Map<String, Object>> mailCrons = dataBaseService.executeQuery("SELECT * FROM sns_mailcron WHERE sendtime<=" + timestamp				+ " ORDER BY sendtime LIMIT 0," + perNum);		if (mailCrons.size() > 0) {			List<Integer> cids = new ArrayList<Integer>();			Map<Integer, Integer> toUids = new HashMap<Integer, Integer>();			Map<Integer, Map<String, Object>> list = new LinkedHashMap<Integer, Map<String, Object>>();			for (Map<String, Object> mailCron : mailCrons) {				int toUid = (Integer) mailCron.get("touid");				int cid = (Integer) mailCron.get("cid");				if (toUid > 0) {					toUids.put(toUid, toUid);				}				cids.add(cid);				list.put(cid, mailCron);			}			String newCids = Common.sImplode(cids);			Map<Integer, List<Map<String, Object>>> subList = new LinkedHashMap<Integer, List<Map<String, Object>>>();			List<Map<String, Object>> mailQueues = dataBaseService.executeQuery("SELECT * FROM sns_mailqueue WHERE cid IN (" + newCids + ")");			for (Map<String, Object> mailQueue : mailQueues) {				int cid = (Integer) mailQueue.get("cid");				List<Map<String, Object>> temp = subList.get(cid);				if (temp == null) {					temp = new ArrayList<Map<String, Object>>();					subList.put(cid, temp);				}				temp.add(mailQueue);			}			if (toUids.size() > 0) {				dataBaseService.executeUpdate("UPDATE sns_space SET lastsend=" + timestamp + " WHERE uid IN (" + Common.sImplode(toUids) + ")");			}			dataBaseService.executeUpdate("DELETE FROM sns_mailcron WHERE cid IN (" + newCids + ")");			dataBaseService.executeUpdate("DELETE FROM sns_mailqueue WHERE cid IN (" + newCids + ")");			try {				Mail mail = new Mail(request, response);				Set<Integer> keys = list.keySet();				for (Integer cid : keys) {					Map<String, Object> mailCron = list.get(cid);					List<Map<String, Object>> mList = subList.get(cid);					String email = (String) mailCron.get("email");					if (!Common.empty(email) && mList != null) {						String subject = Common.getStr((String) mList.get(0).get("subject"), 80, false, false, false, 0, -1, request, response);						StringBuffer messageSB = new StringBuffer();						for (Map<String, Object> subValue : mList) {							subject = (String) subValue.get("subject");							String message = (String) subValue.get("message");							if (Common.empty(message)) {								messageSB.append(subject + "<br>");							} else {								messageSB.append("<br><strong>" + subject + "</strong><br>" + message + "<br>");							}						}						// 获取from						Map<String, Object> dataSets = new HashMap<String, Object>();						List<Map<String, Object>> values = dataBaseService.executeQuery("SELECT * FROM sns_data where var='mail'");						if (values.size() > 0) {							String var = (String) values.get(0).get("var");							if ("setting".equals(var) || "mail".equals(var)) {								dataSets.put(var, Serializer.unserialize((String) values.get(0).get("datavalue"), false));							} else {								dataSets.put(var, Common.sHtmlSpecialChars(values.get(0).get("datavalue")));							}						}						Map<String, String> mails = (Map<String, String>) dataSets.get("mail");						if (!mail.sendMessage(mails.get("from"), email, subject, messageSB.toString())) {							FileHelper.writeLog(request, "sendmail", email + " sendmail failed.");						}					}				}			} catch (Exception e) {				e.printStackTrace();			}		}		return null;	}	@SuppressWarnings("unchecked")	public ActionForward do_stat(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int updateStat = (Integer) sConfig.get("updatestat");		if (updateStat == 0) {			return showMessage(request, response, "not_open_updatestat");		}		String hash = request.getParameter("hash");		if (!Common.empty(hash)) {			CookieHelper.setCookie(request, response, "stat_hash", hash);			return showMessage(request, response, "do_success", "operate.action?ac=stat", 0);		}		Map<String, String> sCookie = (Map<String, String>) request.getAttribute("sCookie");		String statHash = Common.md5(sConfig.get("sitekey") + "\t" + sGlobal.get("timestamp").toString().substring(0, 6));		if (!Common.checkPerm(request, response, "allowstat") && !statHash.equals(sCookie.get("stat_hash"))) {			return showMessage(request, response, "no_privilege");		}		Map<String, String[]> cols = new LinkedHashMap<String, String[]>();		cols.put("login", new String[] { "login", "register", "invite", "appinvite" });		cols.put("add", new String[] { "doing", "blog", "pic", "poll", "event", "share", "thread" });		cols.put("comment", new String[] { "docomment", "blogcomment", "piccomment", "pollcomment", "pollvote", "eventcomment", "eventjoin", "sharecomment",				"post", "click" });		cols.put("space", new String[] { "wall", "poke" });		request.setAttribute("cols", cols);		String type = request.getParameter("type");		if (Common.empty(type)) {			type = "all";		}		String xml = request.getParameter("xml");		if (!Common.empty(xml)) {			StringBuffer xaxis = new StringBuffer();			Map<String, StringBuffer> graph = new LinkedHashMap<String, StringBuffer>();			int count = 1;			List<Map<String, Object>> stats = dataBaseService.executeQuery("SELECT * FROM sns_stat ORDER BY daytime");			for (Map<String, Object> stat : stats) {				xaxis.append("<value xid='" + count + "'>" + stat.get("daytime").toString().substring(4, 8) + "</value>");				if ("all".equals(type)) {					Set<String> cks = cols.keySet();					for (String ck : cks) {						if ("login".equals(ck)) {							StringBuffer login = graph.get("login");							if (login == null) {								login = new StringBuffer();								graph.put("login", login);							}							login.append("<value xid='" + count + "'>" + stat.get("login") + "</value>");							StringBuffer register = graph.get("register");							if (register == null) {								register = new StringBuffer();								graph.put("register", register);							}							register.append("<value xid='" + count + "'>" + stat.get("register") + "</value>");						} else {							int num = 0;							for (String cvk : cols.get(ck)) {								num = (Integer) stat.get(cvk) + num;							}							StringBuffer temp = graph.get(ck);							if (temp == null) {								temp = new StringBuffer();								graph.put(ck, temp);							}							temp.append("<value xid='" + count + "'>" + num + "</value>");						}					}				} else {					StringBuffer temp = graph.get(type);					if (temp == null) {						temp = new StringBuffer();						graph.put(type, temp);					}					temp.append("<value xid='" + count + "'>" + stat.get(type) + "</value>");				}				count++;			}			StringBuffer xmlSB = new StringBuffer();			xmlSB.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");			xmlSB.append("<chart><xaxis>");			xmlSB.append(xaxis);			xmlSB.append("</xaxis><graphs>");			count = 0;			Set<String> keys = graph.keySet();			for (String key : keys) {				StringBuffer value = graph.get(key);				xmlSB.append("<graph gid='" + count + "' title='" + Common.getMessage(request, "cp_do_stat_" + key) + "'>");				xmlSB.append(value);				xmlSB.append("</graph>");				count++;			}			xmlSB.append("</graphs></chart>");			try {				PrintWriter out = response.getWriter();				out.write(xmlSB.toString());			} catch (IOException e) {			}			return null;		}		String siteURL = Common.getSiteUrl(request);		String statuspara = "path=&settings_file=stat_setting.xml&data_file=" + Common.urlEncode("operate.action?ac=stat&xml=1&type=" + type);		Map<String, String> actives = new HashMap<String, String>();		actives.put(type, " style=\"font-weight:bold;\"");		request.setAttribute("actives", actives);		request.setAttribute("type", type);		request.setAttribute("siteURL", siteURL);		request.setAttribute("statuspara", statuspara);		return include(request, response, sConfig, sGlobal, "do_stat.jsp");	}	@SuppressWarnings("unchecked")	public ActionForward do_swfupload(HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		String op = request.getParameter("op");		boolean isupload = Common.empty(request.getParameter("cam")) && Common.empty(request.getParameter("doodle")) ? true : false;		boolean iscamera = request.getParameter("cam") != null ? true : false;		boolean isdoodle = request.getParameter("doodle") != null ? true : false;		String fileurl = "";		String SNS_KEY = SysConstants.snsConfig.get("SNS_KEY");		FileUploadUtil upload = new FileUploadUtil(new File(SysConstants.snsRoot + "/temp"), 4096);		try {			upload.parse(request, "UTF-8");		} catch (Exception e) {			e.printStackTrace();		}		String uid = upload.getParameter("uid");		if (!Common.empty(uid)) {			sGlobal.put("supe_uid", Common.intval(uid));			String hash = upload.getParameter("hash");			if (Common.empty(sGlobal.get("supe_uid")) || !hash.equals(Common.md5(sGlobal.get("supe_uid") + SNS_KEY))) {				return null;			}		} else if (Common.empty(sGlobal.get("supe_uid"))) {			return showMessage(request, response, "to_login", "operate.action?ac=" + sConfig.get("login_action"));		}		if ("finish".equals(op)) {			int albumId = Common.intval(request.getParameter("albumid"));			Map<String, Object> space = Common.getSpace(request, sGlobal, sConfig, sGlobal.get("supe_uid"));			if (Common.ckPrivacy(sGlobal, sConfig, space, "upload", 1)) {				feedService.feedPublish(request, response, albumId, "albumid", false);			}			return null;		} else if ("config".equals(op)) {			String hash = Common.md5(sGlobal.get("supe_uid") + SNS_KEY);			if (isupload && !Common.checkPerm(request, response, "allowupload")) {				hash = "";			} else {				File[] imageFiles = null;				String[] filearr = null;				if (iscamera) {					File[] directory = Common.readDir(SysConstants.snsRoot + "./image/foreground");					File f;					Object[] tempOA;					Map<Integer, Object[]> dirarr = new HashMap<Integer, Object[]>();					for (int i = 0; i < directory.length; i++) {						f = directory[i];						if (f.isDirectory()) {							imageFiles = Common.readDir(f.toString(), new String[] { "jpg", "jpeg", "gif", "png" });							if (imageFiles != null) {								filearr = new String[imageFiles.length];								for (int j = 0; j < imageFiles.length; j++) {									filearr[j] = imageFiles[j].getName();								}								File categoryFile = new File(f.toString() + "/categories.txt");								tempOA = new Object[3];								if (categoryFile.isFile()) {									List<String> catfile = FileHelper.readFileToList(categoryFile);									if (catfile.size() > 0) {										tempOA[0] = catfile.get(0).trim();									} else {										tempOA[0] = "";									}								} else {									tempOA[0] = f.getName().trim();								}								tempOA[1] = "image/foreground/" + f.getName() + "/";								tempOA[2] = filearr;								dirarr.put(i, tempOA);							}						}					}					request.setAttribute("dirarr", dirarr);				} else if (isdoodle) {					imageFiles = Common.readDir(SysConstants.snsRoot + "./image/doodle/big", new String[] { "jpg", "jpeg", "gif", "png" });					if (imageFiles != null) {						filearr = new String[imageFiles.length];						for (int j = 0; j < imageFiles.length; j++) {							filearr[j] = imageFiles[j].getName();						}					}				}				request.setAttribute("filearr", filearr);			}			int max = 0;			String upload_max_filesize = SysConstants.snsConfig.get("upload_max_filesize");			if (upload_max_filesize != null && (upload_max_filesize = upload_max_filesize.trim()).length() > 0) {				String unit = upload_max_filesize.substring(upload_max_filesize.length() - 1);				if (unit.equalsIgnoreCase("k")) {					max = Integer.parseInt(upload_max_filesize.substring(0, upload_max_filesize.length() - 1)) * 1024;				} else if (unit.equalsIgnoreCase("m")) {					max = Integer.parseInt(upload_max_filesize.substring(0, upload_max_filesize.length() - 1)) * 1024 * 1024;				} else if (unit.equalsIgnoreCase("g")) {					max = Integer.parseInt(upload_max_filesize.substring(0, upload_max_filesize.length() - 1)) * 1024 * 1024 * 1024;				} else {					max = Integer.parseInt(upload_max_filesize);				}			}			List<Map<String, Object>> albums = mainService.getAlbums((Integer) sGlobal.get("supe_uid"));			request.setAttribute("max", max);			request.setAttribute("albums", albums);			request.setAttribute("hash", hash);		} else if ("screen".equals(op) || "doodle".equals(op)) {			InputStream stream = null;			try {				stream = request.getInputStream();			} catch (IOException e) {				e.printStackTrace();				return null;			}			String status = "failure";			Object uploadfiles = null;			boolean dosave = true;			int supe_uid = (Integer) sGlobal.get("supe_uid");			if (op.equals("doodle")) {				List<Map<String, Object>> query = dataBaseService.executeQuery("SELECT * FROM sns_usermagic WHERE uid = '" + supe_uid + "' AND mid = 'doodle'");				if (query.size() > 0) {					Map<String, Object> value = query.get(0);					if (Common.empty(value) || (Integer) value.get("count") < 1) {						uploadfiles = "-8";						dosave = false;					}				}			}			if (dosave && stream != null) {				String albumId = request.getHeader("ALBUMID");				String jcChar = SysConstants.snsConfig.get("charset");				try {					albumId = Common.addSlashes((String) Common.siconv(URLDecoder.decode(albumId, "UTF-8"), jcChar, "UTF-8", jcChar));				} catch (UnsupportedEncodingException e) {					e.printStackTrace();					return null;				}				String from = null;				if (op.equals("screen")) {					from = "camera";				} else if ("album".equals(request.getParameter("from"))) {					from = "uploadimage";				}				sConfig.put("allowwatermark", 0);				Map<String, Object> space = (Map<String, Object>) request.getAttribute("space");				try {					uploadfiles = mainService.stream_save(request, response, sGlobal, space, sConfig, stream, albumId, "jpg", "", "", 0, from);				} catch (Exception e) {					e.printStackTrace();					return showMessage(request, response, e.getMessage());				}			}			boolean uploadResponse = true;			int picid = 0, proid = 0, albumid = 0;			if (uploadfiles != null && Common.isArray(uploadfiles)) {				Map<String, Object> tempM = (Map<String, Object>) uploadfiles;				status = "success";				albumid = (Integer) tempM.get("albumid");				picid = (Integer) tempM.get("picid");				if ("doodle".equals(op)) {					Integer thumb = (Integer) tempM.get("thumb");					Integer remote = (Integer) tempM.get("remote");					fileurl = Common.pic_get(sConfig, (String) tempM.get("filepath"), (thumb != null ? thumb : 0), (remote != null ? remote : 0), false);					propsService.magic_use(sGlobal, "doodle", null, true);				}			} else {				Integer tempI = (Integer) uploadfiles;				switch (tempI) {				case -1:					uploadfiles = Common.getMessage(request, "cp_inadequate_capacity_space");					break;				case -2:					uploadfiles = Common.getMessage(request, "cp_only_allows_upload_file_types");					break;				case -4:					uploadfiles = Common.getMessage(request, "cp_ftp_upload_file_size");					break;				case -8:					uploadfiles = Common.getMessage(request, "cp_has_not_more_doodle");					break;				default:					uploadfiles = Common.getMessage(request, "cp_mobile_picture_temporary_failure");					break;				}			}			request.setAttribute("uploadResponse", uploadResponse);			request.setAttribute("status", status);			request.setAttribute("uploadfiles", uploadfiles);			request.setAttribute("proid", proid);			request.setAttribute("albumid", albumid);			request.setAttribute("picid", picid);		} else if (upload.isMultipart()) {			FileItem item = upload.getFileItem("Filedata");			Object uploadFiles = null;			if (item != null) {				long size = item.getSize();				String maxsize = SysConstants.snsConfig.get("upload_max_filesize");				if (size > Common.getByteSizeByBKMG(maxsize)) {					uploadFiles = Common.getMessage(request, "cp_file_is_too_big");				} else {					String albumId = "";					String title = "";					try {						albumId = Common.addSlashes(URLDecoder.decode(upload.getParameter("albumid"), "UTF-8"));						title = URLDecoder.decode(upload.getParameter("title"), "UTF-8");					} catch (Exception e) {					}					uploadFiles = mainService.savePic(request, response, item, albumId, title, 0);				}			}			String proId = upload.getParameter("proid");			boolean uploadResponse = true;			Object albumId = null;			String status = null;			if (!Common.empty(uploadFiles) && Common.isArray(uploadFiles)) {				status = "success";				albumId = ((Map<?, ?>) uploadFiles).get("albumid");			} else {				status = "failure";			}			request.setAttribute("proid", proId);			request.setAttribute("uploadResponse", uploadResponse);			request.setAttribute("status", status);			request.setAttribute("uploadfiles", uploadFiles);			request.setAttribute("albumid", albumId);		}		String newalbumname = Common.sgmdate(request, "yyyyMMdd", 0);		request.setAttribute("newalbumname", newalbumname);		request.setAttribute("iscamera", iscamera);		request.setAttribute("isdoodle", isdoodle);		request.setAttribute("isupload", isupload);		request.setAttribute("fileurl", fileurl);		response.setHeader("Expires", "-1");		response.addHeader("Cache-Control", "no-store, private, post-check=0, pre-check=0, max-age=0");		response.setHeader("Pragma", "no-cache");		return include(request, response, sConfig, sGlobal, "do_swfupload.jsp");	}	private int checkName(String userName, HttpServletRequest request, HttpServletResponse response) {		userName = Common.addSlashes(Common.stripSlashes(Common.trim(userName)));		String guestexp = "\\xA1\\xA1|\\xAC\\xA3|^Guest|^\\xD3\\xCE\\xBF\\xCD|\\xB9\\x43\\xAB\\xC8";		int len = Common.strlen(userName);		if (len > 15 || len < 3 || Common.matches(userName, "(?is)\\s+|^c:\\con\\con|[%,\\*\"\\s\\<\\>\\&]|" + guestexp)) {			return -1;		}		try {			String temp = Common.getStr(userName, 0, false, false, true, 0, 0, request, response);			if (!temp.equals(userName)) {				return -2;			}			/*			 * 2012.5.9 add by solzhang 中文名注册不能在任意位置有‘喀斯特’验证时去空格再验证			 */			Pattern p = Pattern.compile("[\\s\\S]*喀[ ]*斯[ ]*特[\\s\\S]*");			// Pattern p = Pattern.compile("\\{\\d\\}");			Matcher m = p.matcher(userName);			if (m.matches()) {				return -3;			}		} catch (Exception e) {			return -2;		}		/*		 * 2012.5.9 add by solzhang kst和wlkst开头的用户不能注册，不区分大小写，提示该用户已注册		 */		if (userName.toLowerCase().startsWith("kst") || userName.toLowerCase().startsWith("wlkst")) {			return -3;		}		int count = dataBaseService.findRows("SELECT COUNT(*) FROM sns_member WHERE username='" + userName + "'");		if (count > 0) {			return -3;		} else {			return 1;		}	}	private String checkUser(Map<String, Object> sGlobal, String id, Map<String, Object> space) {		if (Common.empty(space)) {			return "user_does_not_exist";		}		String[] auths = ((String) space.get("authstr")).split("\t");		if (auths.length != 3 || Common.intval(auths[0]) < (Integer) sGlobal.get("timestamp") - 86400 * 3 || !auths[1].equals("1") || !auths[2].equals(id)) {			return "getpasswd_illegal";		} else {			return null;		}	}	/**	 * 第三方网站验证成功后调用该方法登录社区，如果执行该方法时发现社区还没有该用户，将执行thirdPartyRegister再登录	 * 方法设为私有是因为只能内部调用 第三方账号在社区注册没有密码	 * 	 * @param request	 *            需要username和thirdPartyName	 * @param response	 * @return	 */	@SuppressWarnings("unchecked")	private ActionForward thirdPartyLogin(HttpServletRequest request, HttpServletResponse response) {		// sGlobal和sConfig不用管，filter中设置		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		// 要注册的用户名		String userName = Common.trim(request.getParameter("username"));		// 第三方网站名称		String thirdPartyName = Common.trim(request.getParameter("thirdPartyName"));		// TODO 将要注册的用户名和第三方网站名组合成新的符合规则的用户名，插入到表中		userName = userName + "&" + thirdPartyName;		List<Map<String, Object>> members = dataBaseService.executeQuery("SELECT * FROM sns_member WHERE username = '" + userName + "'");		// 如果没有该用户就进行注册		if (members.isEmpty()) {			return thirdPartyRegister(request, response);		}		Map<String, Object> member = members.get(0);		List<Map<String, Object>> spaces = dataBaseService.executeQuery("SELECT * FROM sns_space WHERE uid=" + member.get("uid"));		Map<String, Object> space = null;		if (spaces.isEmpty()) {			try {				space = zoneService.openSpace(request, response, sGlobal, sConfig, (Integer) member.get("uid"), (String) member.get("username"), 0, "");			} catch (Exception e) {				return showMessage(request, response, e.getMessage());			}		} else {			space = spaces.get(0);		}		sGlobal.put("member", space);		Integer sUid = (Integer) space.get("uid");		String sUsername = (String) space.get("username");		String sName = (String) space.get("name");		Integer namestatus = (Integer) space.get("namestatus");		Integer mUid = (Integer) member.get("uid");		String mUsername = (String) member.get("username");		zoneService.insertSession(request, response, sGlobal, sConfig, mUid, mUsername, "");		CookieHelper.setCookie(request, response, "auth", Common.authCode("\t" + mUid, "ENCODE", null, 0));		CookieHelper.setCookie(request, response, "loginuser", mUsername, 31536000);		CookieHelper.removeCookie(request, response, "_refer");		sGlobal.put("supe_uid", space.get("uid"));		Map<String, Object> setData = new HashMap<String, Object>();		boolean avatarExists = mainService.ckavatar(sGlobal, sConfig, (Integer) space.get("uid"));		int avatar = (Integer) space.get("avatar");		if (avatarExists) {			if (avatar == 0) {				Map<String, Integer> reward = Common.getReward("setavatar", false, 0, "", true, request, response);				int credit = reward.get("credit");				int experience = reward.get("experience");				if (credit > 0) {					setData.put("credit", "credit=credit+" + credit);				}				if (experience > 0) {					setData.put("experience", "experience=experience+" + experience);				}				setData.put("avatar", "avatar=1");				setData.put("updatetime", "updatetime=" + sGlobal.get("timestamp"));			}		} else if (avatar > 0) {			setData.put("avatar", "avatar=0");		}		if (setData.size() > 0) {			dataBaseService.executeUpdate("UPDATE sns_space SET " + Common.implode(setData, ",") + " WHERE uid='" + space.get("uid") + "'");		}		String refer = "zone.action?do=home";		return showMessage(request, response, "login_success", refer, 1, "");	}	/**	 * 用于第三方登录，比如QQ。该方法只通过thirdPartyLogin调用	 * 	 * @param request	 *            需要用户名和第三方网站名	 * @param response	 * @return	 */	@SuppressWarnings("unchecked")	private ActionForward thirdPartyRegister(HttpServletRequest request, HttpServletResponse response) {		// sGlobal和sConfig不用管，filter中设置		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		// 要注册的用户名		String userName = Common.trim(request.getParameter("username"));		// 第三方网站名称		String thirdPartyName = Common.trim(request.getParameter("thirdPartyName"));		// TODO 将要注册的用户名和第三方网站名组合成新的符合规则的用户名，插入到表中		userName = userName + "&" + thirdPartyName;		// 检测该用户名是否能够注册		int result = checkName(userName, request, response);		if (result == -1) {			return showMessage(request, response, "user_name_is_not_legitimate");		} else if (result == -2) {			return showMessage(request, response, "include_not_registered_words");		} else if (result == -3) {			return showMessage(request, response, "user_name_already_exists");		}		// 时间戳		int timestamp = (Integer) sGlobal.get("timestamp");		// 限制同一个ip，在多长时间内只能注册一个账号		// 注册账号IP地址		String onlineIp = Common.getOnlineIP(request);		String regipDateStr = sConfig.get("regipdate").toString();		// 同一IP地址在一定时间范围内只能注册一个第三方账号		double regipDate = Double.parseDouble(regipDateStr);		if (regipDate > 0) {			List<String> datelines = dataBaseService.executeQuery("SELECT dateline FROM sns_space WHERE regip='" + onlineIp					+ "' ORDER BY dateline DESC LIMIT 1", 1);			if (datelines.size() > 0) {				if (timestamp - Integer.parseInt(datelines.get(0)) < regipDate * 3600) {					return showMessage(request, response, "regip_has_been_registered", null, 1, regipDateStr);				}			}		}		Map<String, Object> insertData = new HashMap<String, Object>();		insertData.put("username", userName);		insertData.put("password", "not password");		insertData.put("blacklist", "");		insertData.put("salt", "not salt");		// 注册新用户		int newUid = dataBaseService.insertTable("sns_member", insertData, true, false);		if (newUid <= 0) {			return showMessage(request, response, "register_error");		}		// 给新用户注册空间		try {			zoneService.openSpace(request, response, sGlobal, sConfig, newUid, userName, 0, "");		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		// 注册成功，插入session信息，生成cookie		zoneService.insertSession(request, response, sGlobal, sConfig, newUid, userName, null);		CookieHelper.setCookie(request, response, "auth", Common.authCode("\t" + newUid, "ENCODE", null, 0));		CookieHelper.setCookie(request, response, "loginuser", userName, 31536000);		CookieHelper.removeCookie(request, response, "_refer");		if ((Integer) sConfig.get("my_status") == 1) {			Map<String, Object> insertUserLogData = new HashMap<String, Object>();			insertUserLogData.put("uid", newUid);			insertUserLogData.put("action", "add");			insertUserLogData.put("dateline", timestamp);			dataBaseService.insertTable("sns_userlog", insertUserLogData, false, true);		}		// 你想跳转的路径，默认跳到用户主页		String jumpURL = "zone.action?do=home";		return showMessage(request, response, "registered", jumpURL);	}}