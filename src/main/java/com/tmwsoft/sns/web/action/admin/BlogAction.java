package com.tmwsoft.sns.web.action.admin;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.TreeMap;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.apache.struts.action.ActionForm;import org.apache.struts.action.ActionForward;import org.apache.struts.action.ActionMapping;import com.tmwsoft.sns.service.FeedService;import com.tmwsoft.sns.util.BeanFactory;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.web.action.BaseAction;public class BlogAction extends BaseAction {	@Override	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {		Map<String, Object> sGlobal = (Map<String, Object>) request.getAttribute("sGlobal");		Map<String, Object> sConfig = (Map<String, Object>) request.getAttribute("sConfig");		int supe_uid = (Integer) sGlobal.get("supe_uid");		boolean allowmanage = Common.checkPerm(request, response, "manageblog");		Map<String, String[]> paramMap = request.getParameterMap();		if (!allowmanage) {			paramMap.put("uid", new String[] { String.valueOf(supe_uid) });			paramMap.put("username", null);		}		try {			if (submitCheck(request, "batchsubmit")) {				Object[] ids = request.getParameterValues("ids");				if (StringUtils.equals("批量删除", request.getParameter("batchsubmit"))) {					// 批量删除					if (ids != null && adminDeleteService.deleteBlogs(request, response, supe_uid, ids)) {						return cpMessage(request, mapping, "do_success", request.getParameter("mpurl"));					} else {						return cpMessage(request, mapping, "cp_the_correct_choice_to_delete_the_log");					}				} else if (StringUtils.equals("批量审核通过", request.getParameter("batchsubmit"))) {					// 批量审核通过					if (ids != null && ids.length > 0) {						String id_range = StringUtils.join(ids, ",");						// 设置pic verify为空, 通过审核状态						dataBaseService.execute("update sns_blog set verify = '' where blogid in (" + id_range + ")");						// 获取user, 并查询他blog是否需要添加动态						List<Map<String, Object>> blogs = dataBaseService.executeQuery("select * from sns_blog where blogid in (" + id_range + ")");						FeedService feedService = (FeedService) BeanFactory.getBean("feedService");						for (Map<String, Object> blog : blogs) {							try {								Integer uid = (Integer) blog.get("uid");								Map<String, Object> user_space = Common.getSpace(request, sGlobal, sConfig, uid);								Map<String, Object> user_privacy = (Map<String, Object>) user_space.get("privacy");								Map<String, Object> user_privacy_feed = (Map<String, Object>) user_privacy.get("feed");								Integer feed_blog = (Integer) user_privacy_feed.get("blog");								if (feed_blog.intValue() == 1) {									// 需要生成动态									feedService.feedPublish(request, response, (Integer) blog.get("blogid"), "blogid", false);								}							} catch (Exception ex) {								;							}						}					}				} else if (StringUtils.equals("批量进行审核", request.getParameter("batchsubmit"))) {					// 批量进行审核					if (ids != null && ids.length > 0) {						String id_range = StringUtils.join(ids, ",");						// 设置pic verify为Y, 进行审核状态						dataBaseService.execute("update sns_blog set verify = 'Y' where blogid in (" + id_range + ")");					}				} else if (StringUtils.equals("批量推荐", request.getParameter("batchsubmit"))) {					if (ids != null && ids.length > 0) {						String id_range = StringUtils.join(ids, ",");						dataBaseService.execute("update sns_blog set recommend = 'Y' where blogid in (" + id_range + ")");					}				} else if (StringUtils.equals("批量取消推荐", request.getParameter("batchsubmit"))) {					if (ids != null && ids.length > 0) {						String id_range = StringUtils.join(ids, ",");						dataBaseService.execute("update sns_blog set recommend = 'N' where blogid in (" + id_range + ")");					}				}			}		} catch (Exception e) {			return showMessage(request, response, e.getMessage());		}		StringBuffer mpurl = new StringBuffer("backstage.action?ac=blog");		String timeoffset = Common.getTimeOffset(sGlobal, sConfig);		String[] intkeys = new String[] { "uid", "friend", "blogid" };		String[] strKeys = new String[] { "username", "recommend", "verify", "classid" };		List<String[]> randkeys = new ArrayList<String[]>();		randkeys.add(new String[] { "sstrtotime", "dateline" });		randkeys.add(new String[] { "intval", "viewnum" });		randkeys.add(new String[] { "intval", "replynum" });		randkeys.add(new String[] { "intval", "hot" });		randkeys.add(new String[] { "intval", "recommendnum" });		String[] likeKeys = new String[] { "subject" };		Map<String, String> wheres1 = getWheres(intkeys, strKeys, randkeys, likeKeys, "b.", paramMap, timeoffset);		mpurl.append(wheres1.get("url"));		strKeys = new String[] { "postip" };		likeKeys = new String[] { "message" };		Map<String, String> wheres2 = getWheres(null, strKeys, null, likeKeys, "bf.", paramMap, null);		mpurl.append(wheres2.get("url"));		String whereSQL1 = wheres1.get("sql") == null ? "1" : wheres1.get("sql");		String whereSQL2 = wheres2.get("sql");		Map<String, String> orders = getOrders(new String[] { "dateline", "viewnum", "replynum", "hot", "recommendnum" }, "blogid", "b.", paramMap);		String ordersql = orders.get("sql");		// 调整推荐次数排序条件		if (StringUtils.indexOf(ordersql, "b.recommendnum") != -1) {			ordersql = StringUtils.replace(ordersql, "b.recommendnum", "recommendnum");		}		mpurl.append(orders.get("url"));		request.setAttribute("orderby_" + request.getParameter("orderby"), " selected");		request.setAttribute("ordersc_" + request.getParameter("ordersc"), " selected");		int perpage = Common.intval(request.getParameter("perpage"));		if (!Common.in_array(new Integer[] { 20, 50, 100, 1000 }, perpage)) {			perpage = 20;		}		int page = Math.max(Common.intval(request.getParameter("page")), 1);		int start = (page - 1) * perpage;		int maxPage = (Integer) sConfig.get("maxpage");		String result = Common.ckStart(start, perpage, maxPage);		if (result != null) {			return showMessage(request, response, result);		}		int count = 1;		String selectsql = null;		if (perpage > 100) {			selectsql = "b.blogid";		} else {			String csql = null;			// 调整推荐次数条件			if (StringUtils.indexOf(whereSQL1, "b.recommendnum") != -1) {				whereSQL1 = StringUtils.replace(whereSQL1, "b.recommendnum", "(select count(*) from sns_blog_recommend where blogid=b.blogid)");			}			if (whereSQL2 != null) {				csql = "SELECT COUNT(*) FROM sns_blog b, sns_blogfield bf WHERE " + whereSQL1 + " AND bf.blogid=b.blogid AND " + whereSQL2;			} else {				csql = "SELECT COUNT(*) FROM sns_blog b WHERE " + whereSQL1;			}			count = dataBaseService.findRows(csql);			selectsql = "*";		}		// 加入查询推荐次数		selectsql += ", (select count(*) from sns_blog_recommend where blogid=b.blogid) recommendnum";		mpurl.append("&perpage=" + perpage);		request.setAttribute("perpage_" + perpage, " selected");		boolean managebatch = Common.checkPerm(request, response, "managebatch");		boolean allowbatch = true;		if (count > 0) {			String qsql = null;			if (whereSQL2 != null) {				qsql = "SELECT " + selectsql + " FROM sns_blog b, sns_blogfield bf WHERE " + whereSQL1 + " AND bf.blogid=b.blogid AND " + whereSQL2						+ " ORDER BY b.blogid DESC LIMIT " + start + "," + perpage + "";			} else {				qsql = "SELECT " + selectsql + " FROM sns_blog b WHERE " + whereSQL1 + " " + ordersql + " LIMIT " + start + "," + perpage + "";			}			List<Map<String, Object>> list = dataBaseService.executeQuery(qsql);			if (perpage > 100) {				count = list.size();			} else {				Map<Integer, String> friends = new TreeMap<Integer, String>();				friends.put(0, "全站用户可见");				friends.put(1, "全好友可见");				friends.put(2, "仅指定的好友可见");				friends.put(3, "仅自己可见");				friends.put(4, "凭密码查看");				SimpleDateFormat blogSDF = Common.getSimpleDateFormat("yyyy-MM-dd HH:mm", timeoffset);				for (Map<String, Object> blog : list) {					if (!managebatch && ((Integer) blog.get("uid")) != supe_uid) {						allowbatch = false;					}					blog.put("friendTitle", friends.get(blog.get("friend")));					blog.put("dateline", Common.gmdate(blogSDF, (Integer) blog.get("dateline")));				}			}			request.setAttribute("list", list);			request.setAttribute("multi", Common.multi(request, count, perpage, page, maxPage, mpurl.toString(), null, null));			if (list.size() % perpage == 1) {				mpurl.append("&page=" + (page - 1));			} else {				mpurl.append("&page=" + page);			}		}		request.setAttribute("FORMHASH", formHash(request));		request.setAttribute("count", count);		request.setAttribute("mpurl", mpurl);		request.setAttribute("allowmanage", allowmanage);		request.setAttribute("allowbatch", allowbatch);		request.setAttribute("perpage", perpage);		request.setAttribute("page", page);		return mapping.findForward("blog");	}}