package com.tmwsoft.sns.service;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.TreeMap;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.apache.commons.lang.StringUtils;import com.tmwsoft.util.DateUtils;import com.tmwsoft.sns.db.DataBaseDao;import com.tmwsoft.sns.util.BeanFactory;import com.tmwsoft.sns.util.Common;import com.tmwsoft.sns.util.FileHelper;import com.tmwsoft.sns.util.Serializer;import com.tmwsoft.sns.util.SysConstants;public class CacheService {	private DataBaseDao dataBaseDao = (DataBaseDao) BeanFactory.getBean("dataBaseDao");	private String[] cacheNames = { "config", "home", "usergroup", "profilefield", "profield", "censor", "creditrule", "ad", "task", "click", "block",			"userapp", "app", "eventclass", "magic" };	public void updateCache() throws Exception {		try {			for (String cacheName : cacheNames) {				Method method = this.getClass().getMethod(cacheName + "_cache");				method.invoke(this);			}			// 最后更新时间			SysConstants.snsInfo.put("cache_updatetime_database", DateUtils.getCurrDefaultDateTime());		} catch (Exception e) {			String message = e.getMessage();			if (message == null) {				message = e.getCause().getMessage();			}			throw new Exception("初始化缓存文件出错<br>" + message);		}	}	public void config_cache() throws IOException {		config_cache(true);	}	public void config_cache(boolean updateData) throws IOException {		Map<String, Object> sConfig = new HashMap<String, Object>();		List<Map<String, Object>> configs = dataBaseDao.executeQuery("SELECT * FROM sns_config");		for (Map<String, Object> value : configs) {			String var = (String) value.get("var");			Object val = value.get("datavalue");			if ("privacy".equals(var)) {				val = Common.empty(val) ? val : Serializer.unserialize((String) val, false);			}			sConfig.put(var, val);		}		cache_write("cache_config", "sConfig", sConfig);		if (updateData) {			String setting = Common.getData("setting");			cache_write("cache_setting", "globalSetting", Serializer.unserialize(setting, false));			String mail = Common.getData("mail");			cache_write("cache_mail", "globalMail", Serializer.unserialize(mail, false));			String spam = Common.getData("spam");			cache_write("cache_spam", "globalSpam", Serializer.unserialize(spam, false));		}	}	public void home_cache() throws IOException {		String home = Common.getData("home");		cache_write("cache_home", "globalHome", Serializer.unserialize(home, false));	}	public void usergroup_cache() throws IOException {		Map<Integer, Map<String, String>> groupTitles = new LinkedHashMap<Integer, Map<String, String>>();		boolean highest = true;		int lower = 999999999;		List<Map<String, Object>> usergroups = dataBaseDao.executeQuery("SELECT * FROM sns_usergroup ORDER BY explower DESC");		for (Map<String, Object> usergroup : usergroups) {			Integer gid = (Integer) usergroup.get("gid");			usergroup.put("maxattachsize", ((Integer) usergroup.get("maxattachsize")) * 1024 * 1024);			if ((Integer) usergroup.get("system") == 0) {				if (highest) {					usergroup.put("exphigher", lower);					highest = false;				} else {					usergroup.put("exphigher", lower - 1);				}				lower = (Integer) usergroup.get("explower");			}			String magicaward = (String) usergroup.get("magicaward");			if (magicaward.length() > 0) {				usergroup.put("magicaward", Serializer.unserialize((String) usergroup.get("magicaward"), false));			}			Map<String, String> groupTitle = new LinkedHashMap<String, String>();			groupTitle.put("grouptitle", (String) usergroup.get("grouptitle"));			groupTitle.put("color", (String) usergroup.get("color"));			groupTitle.put("icon", (String) usergroup.get("icon"));			groupTitles.put(gid, groupTitle);			cache_write("usergroup_" + gid, "usergroup" + gid, usergroup);		}		cache_write("usergroup", "globalGroupTitle", groupTitles);	}	public void profilefield_cache() throws IOException {		Map<Integer, Map<String, Object>> datas = new LinkedHashMap<Integer, Map<String, Object>>();		List<Map<String, Object>> profilefields = dataBaseDao				.executeQuery("SELECT fieldid, title, formtype, maxsize, required, invisible, allowsearch, choice FROM "						+ " sns_profilefield ORDER BY displayorder");		for (Map<String, Object> value : profilefields) {			datas.put((Integer) value.get("fieldid"), value);		}		cache_write("cache_profilefield", "globalProfilefield", datas);	}	public void profield_cache() throws IOException {		Map<Integer, Map<String, Object>> datas = new LinkedHashMap<Integer, Map<String, Object>>();		List<Map<String, Object>> profields = dataBaseDao				.executeQuery("SELECT fieldid, title, formtype, inputnum, mtagminnum, manualmoderator, manualmember FROM "						+ " sns_profield ORDER BY displayorder");		for (Map<String, Object> value : profields) {			datas.put((Integer) value.get("fieldid"), value);		}		cache_write("cache_profield", "globalProfield", datas);	}	public void censor_cache() throws IOException {		List<String> banned = new ArrayList<String>();		List<String> banwords = new ArrayList<String>();		Map<String, Object> globalCensor = new HashMap<String, Object>();		String censorDatavalue = (String) Common.getData("censor");		if (censorDatavalue != null) {			String[] censorarr = censorDatavalue.split("\n");			String[] tempArray;			String find = null;			String replace = null;			String findword;			Pattern pattern = Pattern.compile("\\\\\\{(\\d+)\\\\\\}");			if (censorarr != null) {				StringBuilder builder = new StringBuilder("[\\s\\S]*");				int builderPrimalLen = builder.length();				for (String censor : censorarr) {					censor = censor.trim();					if (Common.empty(censor)) {						continue;					}					tempArray = censor.split("=");					if (tempArray.length > 1) {						find = tempArray[0];						replace = tempArray[1];					} else {						continue;					}					if (find.equals("")) {						continue;					}					findword = find;					// find = pattern.matcher(Common.pregQuote(find,					// '/')).replaceAll(".{0,\\\\1}");					find = create_reg_str(find);					// if ("{BANNED}".equals(replace)) {					// banwords.add(pattern.matcher(Common.pregQuote(findword,					// '/')).replaceAll("*"));					// banned.add(find);					// } else					if ("{AUDIT}".equals(replace)) {						// ={AUDIT} 禁止发布，让管理员审核						Map<String, LinkedHashMap<Integer, String>> audit_banned_map = (Map<String, LinkedHashMap<Integer, String>>) globalCensor								.get("audit_banned");						if (audit_banned_map == null) {							audit_banned_map = new HashMap<String, LinkedHashMap<Integer, String>>();							globalCensor.put("audit_banned", audit_banned_map);						}						LinkedHashMap<Integer, String> findValue = audit_banned_map.get("find");						if (findValue == null) {							findValue = new LinkedHashMap<Integer, String>();							audit_banned_map.put("find", findValue);						}						if (StringUtils.equalsIgnoreCase("[*]", find)) {							find = "[\\s\\S]*";						}						findValue.put(findValue.size(), builder.append(find).append("[\\s\\S]*").toString());						// builder.delete(builderPrimalLen, builder.length());						builder.delete(0, builder.length());						builder.append("[\\s\\S]*");						LinkedHashMap<Integer, String> replaceValue = audit_banned_map.get("replace");						if (replaceValue == null) {							replaceValue = new LinkedHashMap<Integer, String>();							audit_banned_map.put("replace", replaceValue);						}						replaceValue.put(replaceValue.size(), replace);					} else if (replace.endsWith("{AUDIT}") && replace.length() > "{AUDIT}".length()) {						// =xxxx{AUDIT} 可以替换发布，并让管理员审核						Map<String, LinkedHashMap<Integer, String>> audit_filter_map = (Map<String, LinkedHashMap<Integer, String>>) globalCensor								.get("audit_filter");						if (audit_filter_map == null) {							audit_filter_map = new HashMap<String, LinkedHashMap<Integer, String>>();							globalCensor.put("audit_filter", audit_filter_map);						}						LinkedHashMap<Integer, String> findValue = audit_filter_map.get("find");						if (findValue == null) {							findValue = new LinkedHashMap<Integer, String>();							audit_filter_map.put("find", findValue);						}						findValue.put(findValue.size(), builder.append(find).append("[\\s\\S]*").toString());						// builder.delete(builderPrimalLen, builder.length());						builder.delete(0, builder.length());						builder.append("[\\s\\S]*");						LinkedHashMap<Integer, String> replaceValue = audit_filter_map.get("replace");						if (replaceValue == null) {							replaceValue = new LinkedHashMap<Integer, String>();							audit_filter_map.put("replace", replaceValue);						}						replaceValue.put(replaceValue.size(), StringUtils.replace(replace, "{AUDIT}", ""));					} else {						Map<String, LinkedHashMap<Integer, String>> filterValue = (Map<String, LinkedHashMap<Integer, String>>) globalCensor.get("filter");						if (filterValue == null) {							filterValue = new HashMap<String, LinkedHashMap<Integer, String>>();							globalCensor.put("filter", filterValue);						}						LinkedHashMap<Integer, String> findValue = filterValue.get("find");						if (findValue == null) {							findValue = new LinkedHashMap<Integer, String>();							filterValue.put("find", findValue);						}						findValue.put(findValue.size(), builder.append(find).append("[\\s\\S]*").toString());						// builder.delete(builderPrimalLen, builder.length());						builder.delete(0, builder.length());						builder.append("[\\s\\S]*");						LinkedHashMap<Integer, String> replaceValue = filterValue.get("replace");						if (replaceValue == null) {							replaceValue = new LinkedHashMap<Integer, String>();							filterValue.put("replace", replaceValue);						}						replaceValue.put(replaceValue.size(), replace);					}				}			}		}		if (banned.size() > 0) {			globalCensor.put("banned", "(?i)(" + Common.implode(banned, "|") + ")");			globalCensor.put("banword", Common.implode(banwords, ", "));		}		cache_write("cache_censor", "globalCensor", globalCensor);	}	private String create_reg_str(String data) {		Pattern p = Pattern.compile("\\{\\d\\}");		Matcher m = p.matcher(data);		while (m.find()) {			String digit_str = m.group();			String digit = digit_str.replaceAll("\\{|\\}", "");			digit_str = digit_str.replace("{", "\\{");			digit_str = digit_str.replace("}", "\\}");			data = data.replaceAll(digit_str, "[\\\\s\\\\S]{0," + digit + "}");		}		return data;	}	public void creditrule_cache() throws Exception {		Map<String, Map<String, Object>> datas = new LinkedHashMap<String, Map<String, Object>>();		List<Map<String, Object>> creditrules = dataBaseDao.executeQuery("SELECT * FROM sns_creditrule");		for (Map<String, Object> value : creditrules) {			datas.put((String) value.get("action"), value);		}		cache_write("cache_creditrule", "globalCreditrule", datas);	}	public void ad_cache() throws Exception {		Map<String, TreeMap<Integer, Object>> datas = new LinkedHashMap<String, TreeMap<Integer, Object>>();		List<Map<String, Object>> ads = dataBaseDao.executeQuery("SELECT adid, pagetype FROM sns_ad WHERE system='1' AND available='1'");		TreeMap<Integer, Object> tempMap = null;		for (Map<String, Object> value : ads) {			tempMap = datas.get((String) value.get("pagetype"));			if (tempMap == null) {				tempMap = new TreeMap<Integer, Object>();			}			tempMap.put(tempMap.size(), value.get("adid"));			datas.put((String) value.get("pagetype"), tempMap);		}		cache_write("cache_ad", "globalAd", datas);	}		public void ad_data_cache() {		List<Map<String, Object>> ads = dataBaseDao.executeQuery("SELECT adid, adcode FROM sns_ad");		for (Map<String, Object> ad : ads) {			StringBuffer html = new StringBuffer();			Map<String, Object> adCode = Serializer.unserialize((String) ad.get("adcode"), false);			String type = (String) adCode.get("type");			if ("html".equals(type)) {				html.append(adCode.get("html"));			} else if ("flash".equals(type)) {				Object flashheight = adCode.get("flashheight");				Object flashwidth = adCode.get("flashwidth");				String flashUrl = (String) adCode.get("flashurl");				String width = Common.empty(flashwidth) ? "" : "width=\"" + flashwidth + "\"";				String height = Common.empty(flashheight) ? "" : "height=\"" + flashheight + "\"";				html.append("<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" adcodebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,45,0\" "						+ width + " " + height + ">\n");				html.append("<param name=\"movie\" value=\"" + flashUrl + "\" />\n");				html.append("<param name=\"quality\" value=\"high\" />\n");				html.append("<embed src=\""						+ flashUrl						+ "\" quality=\"high\" pluginspage=\"http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash\" type=\"application/x-shockwave-flash\" "						+ width + " " + height + "></embed>\n");				html.append("</object>\n");			} else if ("image".equals(type)) {				Object imageheight = adCode.get("imageheight");				Object imagewidth = adCode.get("imagewidth");				String imagesrc = (String) adCode.get("imagesrc");				String imageurl = (String) adCode.get("imageurl");				String imagealt = (String) adCode.get("imagealt");				String width = Common.empty(imagewidth) ? "" : "width=\"" + imagewidth + "\"";				String height = Common.empty(imageheight) ? "" : "height=\"" + imageheight + "\"";				html.append("<a href=\"" + imageurl + "\" target=\"_blank\"><img src=\"" + imagesrc + "\" " + width + " " + height						+ " border=\"0\" alt=\"" + imagealt + "\"></a>");			} else if ("text".equals(type)) {				String textcontent = (String) adCode.get("textcontent");				String texturl = (String) adCode.get("texturl");				Object textsize = adCode.get("textsize");				String size = Common.empty(textsize) ? "" : "style=\"font-size:" + textsize + "px;\"";				html.append("<span style=\"padding:0.8em\"><a href=\"" + texturl + "\" target=\"_blank\" " + size + ">" + textcontent						+ "</a></span>");			}			String tpl = SysConstants.snsRoot + "/data/adtpl/" + ad.get("adid") + ".htm";			FileHelper.writeFile(tpl, html.toString(), null);			// 最后更新时间			SysConstants.snsInfo.put("cache_updatetime_ad", DateUtils.getCurrDefaultDateTime());		}	}	public void task_cache() throws Exception {		int timestamp = (int) (System.currentTimeMillis() / 1000);		Map<Integer, Map<String, Object>> datas = new LinkedHashMap<Integer, Map<String, Object>>();		List<Map<String, Object>> tasks = dataBaseDao.executeQuery("SELECT * FROM sns_task WHERE available='1' ORDER BY displayorder");		for (Map<String, Object> value : tasks) {			int endtime = (Integer) value.get("endtime");			int maxnum = (Integer) value.get("maxnum");			int num = (Integer) value.get("num");			if ((endtime == 0 || endtime >= timestamp) && (maxnum == 0 || maxnum > num)) {				datas.put((Integer) value.get("taskid"), value);			}		}		cache_write("cache_task", "globalTask", datas);	}	public void click_cache() throws Exception {		Map<String, Map<Integer, Map<String, Object>>> datas = new LinkedHashMap<String, Map<Integer, Map<String, Object>>>();		List<Map<String, Object>> clicks = dataBaseDao.executeQuery("SELECT * FROM sns_click ORDER BY displayorder");		for (Map<String, Object> value : clicks) {			String idtype = (String) value.get("idtype");			Map<Integer, Map<String, Object>> idtypes = datas.get(idtype);			if (idtypes == null) {				idtypes = new LinkedHashMap<Integer, Map<String, Object>>();				datas.put(idtype, idtypes);			}			idtypes.put((Integer) value.get("clickid"), value);		}		cache_write("cache_click", "globalClick", datas);	}	public void block_cache() throws Exception {		Map<Integer, Integer> datas = new LinkedHashMap<Integer, Integer>();		List<Map<String, Object>> blocks = dataBaseDao.executeQuery("SELECT * FROM sns_block");		for (Map<String, Object> block : blocks) {			// 更新模块调用缓存文件			datas.put((Integer) block.get("bid"), (Integer) block.get("cachetime"));			Object bid = block.get("bid");			Object blockSql = block.get("blocksql");			Object cacheName = block.get("cachename");			Object cacheTime = block.get("cachetime");			Object startNum = block.get("startnum");			Object num = block.get("num");			Object perPage = block.get("perpage");			String htmlCode = (String)block.get("htmlcode");			htmlCode = Common.addSlashes(Common.stripSlashes(htmlCode).replaceAll("(?i)href=\"(?!http://)(.+?)\"", "href=\"" + SysConstants.snsConfig.get("siteUrl") + "$1\""));			if (!Common.empty(blockSql)) {				String perStr = null;				if (Common.empty(perPage)) {					perStr = "";					if (Common.empty(num)) {						num = 1;					}					blockSql = blockSql + " LIMIT " + startNum + "," + num;				} else {					perStr = "perpage/" + perPage + "/";				}				htmlCode = "<%@ page language=\"java\" pageEncoding=\"" + SysConstants.SNS_CHARSET + "\"%>\r\n" +						"<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\r\n" +						"<%@ taglib uri=\"http://sns.tmwsoft.com/sns\" prefix=\"sns\"%>\r\n" +						"${sns:showData(pageContext.request,\"" + perStr + "sql/" + Common.urlEncode((String) blockSql) + "/cachename/" + cacheName + "/cachetime/" + cacheTime + "\")}\r\n" + 						Common.stripSlashes(htmlCode);			}			String tpl = SysConstants.snsRoot + "/data/blocktpl/" + bid + ".jsp";			FileHelper.writeFile(tpl, htmlCode, null);		}		cache_write("cache_block", "globalBlock", datas);	}	public void userapp_cache() throws IOException {		byte my_status = 1;		Map<Integer, Map<String, Object>> datas = new LinkedHashMap<Integer, Map<String, Object>>();		if (my_status > 0) {			List<Map<String, Object>> userapps = dataBaseDao.executeQuery("SELECT * FROM sns_myapp WHERE flag='1' ORDER BY displayorder");			for (Map<String, Object> value : userapps) {				datas.put((Integer) value.get("appid"), value);			}		}		cache_write("cache_userapp", "globalUserApp", datas);	}	public void app_cache() throws IOException {		Map<String, Object> data = new HashMap<String, Object>();		cache_write("cache_app", "globalApp", data);	}	public void eventclass_cache() throws IOException {		Map<Integer, Map<String, Object>> datas = new LinkedHashMap<Integer, Map<String, Object>>();		List<Map<String, Object>> eventclasses = dataBaseDao.executeQuery("SELECT * FROM sns_eventclass ORDER BY displayorder");		for (Map<String, Object> value : eventclasses) {			Integer classid = (Integer) value.get("classid");			Integer poster = (Integer) value.get("poster");			if (poster > 0) {				value.put("poster", "data/event/" + classid + ".jpg");			} else {				value.put("poster", "image/event/default.jpg");			}			datas.put(classid, value);		}		cache_write("cache_eventclass", "globalEventClass", datas);	}	public void magic_cache() throws Exception {		Map<Object, Object> magic = new LinkedHashMap<Object, Object>();		List<Map<String, Object>> magics = dataBaseDao.executeQuery("SELECT mid, name FROM sns_magic WHERE close='0'");		for (Map<String, Object> value : magics) {			magic.put(value.get("mid"), value.get("name"));		}		cache_write("cache_magic", "globalMagic", magic);	}	public void delTreeDir(String dir) {		File[] subFiles = Common.readDir(dir);		if (subFiles != null) {			for (File subFile : subFiles) {				if (subFile.isFile()) {					subFile.delete();				} else {					delTreeDir(subFile.getPath());				}			}		}	}	public void block_data_cache(Map<String, Object> sConfig) {		if ("database".equals(sConfig.get("cachemode"))) {			List<String> query = dataBaseDao.executeQuery("SHOW TABLES LIKE 'sns_cache%';", 1);			for (String table : query) {				dataBaseDao.execute("TRUNCATE TABLE `" + table + "`");			}		} else {			delTreeDir(SysConstants.snsRoot + "/data/block_cache");		}		// 最后更新时间		SysConstants.snsInfo.put("cache_updatetime_block", DateUtils.getCurrDefaultDateTime());	}	@SuppressWarnings("unchecked")	private String arrayeval(String var, Map values, int level) {		StringBuffer space = new StringBuffer();		for (int i = 0; i < level; i++) {			space.append("\t");		}		StringBuffer curdata = new StringBuffer();		if (values instanceof LinkedHashMap) {			curdata.append("Map " + var + "= new LinkedHashMap();\n");		} else {			curdata.append("Map " + var + "= new HashMap();\n");		}		Object keyTemp = null;		String valTemp = null;		Set<Object> keys = values.keySet();		for (Object key : keys) {			Object val = values.get(key);			if (key instanceof String) {				keyTemp = "\"" + key + "\"";			} else {				keyTemp = key;			}			boolean isMap = val instanceof Map;			if (isMap) {				String temp = key.toString();				String varTemp = var + temp.substring(0, 1).toUpperCase() + temp.substring(1);				curdata.append(space);				curdata.append("\t");				curdata.append(arrayeval(varTemp, (Map) val, level + 1));				curdata.append(space);				curdata.append(var + ".put(" + keyTemp + "," + varTemp + ");\n");			} else {				valTemp = val.toString();				if (!valTemp.matches("^\\-?\\d+$") || Common.strlen(valTemp) > 12) {					valTemp = Common.addSlashes(valTemp);					valTemp = valTemp.replaceAll("\r\n", "\\\\r\\\\n");					val = "\"" + valTemp + "\"";				}				curdata.append(space);				curdata.append(var + ".put(" + keyTemp + "," + val + ");\n");			}		}		return curdata.toString();	}	@SuppressWarnings("unchecked")	private void cache_write(String fileName, String var, Map values) throws IOException {		String cachePath = SysConstants.snsRoot + "/data/cache/" + fileName + ".jsp";		StringBuffer cacheContent = new StringBuffer();		cacheContent.append("<%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"");		cacheContent.append(SysConstants.SNS_CHARSET);		cacheContent.append("\"%>\n");		cacheContent.append("<%\n");		cacheContent.append(arrayeval(var, values, 0));		cacheContent.append("request.setAttribute(\"" + var + "\"," + var + ");\n");		cacheContent.append("%>");		if (!FileHelper.writeFile(cachePath, cacheContent.toString())) {			throw new IOException("File: " + cachePath + " write error.");		}	}}